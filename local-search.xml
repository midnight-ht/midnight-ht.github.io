<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Promise-手写Promise原理</title>
    <link href="/2022/01/21/Promise-%E6%89%8B%E5%86%99Promise%E5%8E%9F%E7%90%86/"/>
    <url>/2022/01/21/Promise-%E6%89%8B%E5%86%99Promise%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p>源码地址：<a href="https://gitee.com/lagou-19-web-paid/practice/tree/master/promise">https://gitee.com/lagou-19-web-paid/practice/tree/master/promise</a></p><h1 id="1-Promise-对象的基础模型-同步，分析执行流程"><a href="#1-Promise-对象的基础模型-同步，分析执行流程" class="headerlink" title="1- Promise 对象的基础模型 (同步，分析执行流程)"></a>1- Promise 对象的基础模型 (同步，分析执行流程)</h1><ol><li>Promise 是一个类，类接收的是一个构造函数，在执行类的时候这个构造函数也会同步执行。</li><li>构造函数在同步执行的时候，会传递俩个回调函数，分别是成功回调[resolve]、失败回调[reject]。</li></ol><ul><li>成功回调：回调函数内接收一个参数，可以是一个普通值，也可以是一个 Promise 对象。此阶段暂时只考虑普通值。</li><li>失败回调：回调函数内接收一个参数，一般为失败原因 </li></ul><ol start="3"><li>Promise 中有三个状态，分别为 等待[pending]、成功[fulfilled]、失败[rejected]。状态仅支持 pending -&gt; fulfilled 或 pending -&gt; rejected，状态一旦确定就不支持修改了。</li><li>then 方法会接收俩个参数，成功回调[successCallback]函数、失败回调[failCallback]函数。在 then 方法执行时，会依据Promise 的执行状态，执行成功回调或者失败回调。并在执行相对应的回调时，取出相对应的缓存状态值，作为参数传递至回调函数。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs javascript"> <br> <span class="hljs-comment">// Promise 的三个状态</span><br> <span class="hljs-keyword">const</span> PENDING = <span class="hljs-string">&#x27;pending&#x27;</span> <span class="hljs-comment">// 等待</span><br> <span class="hljs-keyword">const</span> FULFILLED = <span class="hljs-string">&#x27;fulfilled&#x27;</span> <span class="hljs-comment">// 成功</span><br> <span class="hljs-keyword">const</span> REJECTED = <span class="hljs-string">&#x27;rejected&#x27;</span> <span class="hljs-comment">// 失败</span><br> <br> <span class="hljs-comment">/**</span><br><span class="hljs-comment"> *   模拟 原生Promise</span><br><span class="hljs-comment"> *   </span><br><span class="hljs-comment"> *   <span class="hljs-doctag">@class <span class="hljs-variable">MyPromise</span></span></span><br><span class="hljs-comment"> *   <span class="hljs-doctag">@constructor </span>excutor 构造函数，函数接收俩个回调函数，回调函数</span><br><span class="hljs-comment"> */</span><br> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyPromise</span> </span>&#123;<br>     <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params"> excutor </span>)</span> &#123;<br>         excutor(<span class="hljs-built_in">this</span>.resolve, <span class="hljs-built_in">this</span>.reject)<br>     &#125;<br>     <br>     <span class="hljs-comment">// 默认状态为 pending(等待)</span><br>     status = PENDING<br>     <br>     <span class="hljs-comment">// 缓存状态值</span><br>     value = <span class="hljs-literal">undefined</span> <span class="hljs-comment">// 成功状态 【参数】</span><br>     reason = <span class="hljs-literal">undefined</span> <span class="hljs-comment">// 失败状态 【原因】</span><br><br><br>     <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *   成功回调</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     *   <span class="hljs-doctag">@see </span>函数使用箭头函数，可以使 this 指向于当前 MyPromise 对象</span><br><span class="hljs-comment">     */</span><br>     resolve = <span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> &#123;<br>         <span class="hljs-comment">// 状态一旦确定不支持更改，return 出函数</span><br>         <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.status !== PENDING) <span class="hljs-keyword">return</span><br>         <br>         <span class="hljs-comment">// 更改状态为 fulfilled(成功)</span><br>         <span class="hljs-built_in">this</span>.status = FULFILLED<br>         <br>         <span class="hljs-comment">// 缓存成功回调 传递的值</span><br>         <span class="hljs-built_in">this</span>.value = value<br>     &#125;<br>     <br>     <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 失败回调</span><br><span class="hljs-comment">     */</span><br>     reject = <span class="hljs-function">(<span class="hljs-params">reason</span>) =&gt;</span> &#123;<br>         <span class="hljs-comment">// 状态一旦确定不支持更改，return 出函数</span><br>         <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.status !== PENDING) <span class="hljs-keyword">return</span><br>         <br>         <span class="hljs-comment">// 更改状态为 rejected(失败)</span><br>         <span class="hljs-built_in">this</span>.status = REJECTED<br>         <br>         <span class="hljs-comment">// 缓存失败回调 传递的原因</span><br>         <span class="hljs-built_in">this</span>.reason = reason<br>     &#125;<br>     <br>     <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *   then 方法</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     *   <span class="hljs-doctag">@params <span class="hljs-type">&#123;function&#125;</span> </span>successCallback[成功回调]</span><br><span class="hljs-comment">     *   <span class="hljs-doctag">@params <span class="hljs-type">&#123;function&#125;</span> </span>failCallback[失败回调]</span><br><span class="hljs-comment">     */</span><br>     then ( successCallback, failCallback ) &#123;<br>         <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.status === FULFILLED) successCallback(<span class="hljs-built_in">this</span>.value)<br>         <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.status === REJECTED) failCallback(<span class="hljs-built_in">this</span>.reason)<br>     &#125;<br> &#125;<br> <br> <br> <span class="hljs-comment">// 测试当前 MyPromise </span><br> <br> <span class="hljs-keyword">let</span> promiseTest = <span class="hljs-keyword">new</span> MyPromise(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>     resolve(<span class="hljs-string">&#x27;成功&#x27;</span>)<br>     <span class="hljs-comment">// reject(&#x27;失败&#x27;)</span><br> &#125;)<br><span class="hljs-comment">// 执行 then 方法 </span><br> promiseTest.then(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> &#123;<br>     <span class="hljs-built_in">console</span>.log(value)<br> &#125;, <span class="hljs-function"><span class="hljs-params">reason</span> =&gt;</span> &#123;<br>     <span class="hljs-built_in">console</span>.log(reason)<br> &#125;)<br><br></code></pre></td></tr></table></figure><h1 id="2-Promise-对象的异步特性"><a href="#2-Promise-对象的异步特性" class="headerlink" title="2- Promise 对象的异步特性"></a>2- Promise 对象的异步特性</h1><ol><li>异步特点就是不会阻塞代码执行，待异步结束后才会得到特定的值、特定的函数才会执行。</li><li>当执行 Promise 中的 then 方法时，Promise 对象的状态为 pending[等待状态时]，就断定为异步状态。</li><li>断定为异步状态时，successCallback[成功回调]、failCallback[失败回调] 需要缓存在 Promise 对象中。</li><li>在构造函数内的异步方法执行完毕，调用 resolve[成功回调] 、reject[失败回调] 时，前置逻辑处理完毕后，最后执行外部调用 then 方法挂载至 Promise 对象中的 successCallbak[成功回调] 或 failCallback[失败回调]。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs javascript">    <br>    <span class="hljs-comment">// Promise 的三个状态</span><br>    <span class="hljs-keyword">const</span> PENDING = <span class="hljs-string">&#x27;pending&#x27;</span> <span class="hljs-comment">// 等待</span><br>    <span class="hljs-keyword">const</span> FULFILLED = <span class="hljs-string">&#x27;fulfilled&#x27;</span> <span class="hljs-comment">// 成功</span><br>    <span class="hljs-keyword">const</span> REJECTED = <span class="hljs-string">&#x27;rejected&#x27;</span> <span class="hljs-comment">// 失败</span><br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    *   模拟 原生Promise</span><br><span class="hljs-comment">    *   </span><br><span class="hljs-comment">    *   <span class="hljs-doctag">@class <span class="hljs-variable">MyPromise</span></span></span><br><span class="hljs-comment">    *   <span class="hljs-doctag">@constructor </span>excutor 构造函数，函数接收俩个回调函数，回调函数</span><br><span class="hljs-comment">    */</span><br>     resolve = <span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> &#123;<br>         <span class="hljs-comment">// 状态一旦确定不支持更改，return 出函数</span><br>         <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.status !== PENDING) <span class="hljs-keyword">return</span><br><br>         <span class="hljs-comment">// 更改状态为 fulfilled(成功)</span><br>         <span class="hljs-built_in">this</span>.status = FULFILLED<br><br>         <span class="hljs-comment">// 缓存成功回调 传递的值</span><br>         <span class="hljs-built_in">this</span>.value = value<br><br>         <span class="hljs-comment">// 执行成功回调</span><br>         <span class="hljs-built_in">this</span>.successCallback &amp;&amp; <span class="hljs-built_in">this</span>.successCallback(<span class="hljs-built_in">this</span>.value)<br>     &#125;<br><br>     <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 失败回调</span><br><span class="hljs-comment">     */</span><br>     reject = <span class="hljs-function">(<span class="hljs-params">reason</span>) =&gt;</span> &#123;<br>         <span class="hljs-comment">// 状态一旦确定不支持更改，return 出函数</span><br>         <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.status !== PENDING) <span class="hljs-keyword">return</span><br><br>         <span class="hljs-comment">// 更改状态为 rejected(失败)</span><br>         <span class="hljs-built_in">this</span>.status = REJECTED<br><br>         <span class="hljs-comment">// 缓存失败回调 传递的原因</span><br>         <span class="hljs-built_in">this</span>.reason = reason<br><br>         <span class="hljs-comment">// 执行失败回调</span><br>         <span class="hljs-built_in">this</span>.failCallback &amp;&amp; <span class="hljs-built_in">this</span>.failCallback(<span class="hljs-built_in">this</span>.reason)<br>     &#125;<br>        <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    *   then 方法</span><br><span class="hljs-comment">    *</span><br><span class="hljs-comment">    *   <span class="hljs-doctag">@params <span class="hljs-type">&#123;function&#125;</span> </span>successCallback[成功回调]</span><br><span class="hljs-comment">    *   <span class="hljs-doctag">@params <span class="hljs-type">&#123;function&#125;</span> </span>failCallback[失败回调]</span><br><span class="hljs-comment">    */</span><br>    then ( successCallback, failCallback ) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.status === FULFILLED) successCallback(<span class="hljs-built_in">this</span>.value)<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.status === REJECTED) failCallback(<span class="hljs-built_in">this</span>.reason)<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 缓存成功回调</span><br>            <span class="hljs-built_in">this</span>.successCallback = successCallback<br>            <span class="hljs-comment">// 缓存失败回调</span><br>            <span class="hljs-built_in">this</span>.failCallback = failCallback<br>        &#125;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-comment">// 测试当前 MyPromise</span><br><br><span class="hljs-keyword">let</span> promiseTest = <span class="hljs-keyword">new</span> MyPromise(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        resolve(<span class="hljs-string">&#x27;成功&#x27;</span>)<br>        <span class="hljs-comment">// reject(&#x27;失败&#x27;)</span><br>    &#125;, <span class="hljs-number">2000</span>)<br>&#125;)<br>promiseTest.then(<span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;成功回调：&#x27;</span>, value)<br>&#125;, <span class="hljs-function">(<span class="hljs-params">reason</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;失败原因：&#x27;</span>, reason)<br>&#125;)<br><br><br></code></pre></td></tr></table></figure><h1 id="3-Promise-支持多次调用的特性实现"><a href="#3-Promise-支持多次调用的特性实现" class="headerlink" title="3- Promise 支持多次调用的特性实现"></a>3- Promise 支持多次调用的特性实现</h1><ol><li>创建 Promise 方法是可以被多次调用的，在调用后每个 then 方法都应该被正确执行。</li><li>改造缓存回调函数的容器为数组，每次执行 then 方法后，successCallback[成功回调]、failCallback[失败回调] 都应进入对应的缓存栈。</li><li>在构造函数内调用 resolve[成功回调] 、reject[失败回调] 时，循环执行缓存的回调函数，并在回调函数内传入当前 Promise 的成功数据，或失败原因。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><br><span class="hljs-comment">// Promise 的三个状态</span><br><span class="hljs-keyword">const</span> PENDING = <span class="hljs-string">&#x27;pending&#x27;</span> <span class="hljs-comment">// 等待</span><br><span class="hljs-keyword">const</span> FULFILLED = <span class="hljs-string">&#x27;fulfilled&#x27;</span> <span class="hljs-comment">// 成功</span><br><span class="hljs-keyword">const</span> REJECTED = <span class="hljs-string">&#x27;rejected&#x27;</span> <span class="hljs-comment">// 失败</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *   模拟 原生Promise</span><br><span class="hljs-comment"> *  </span><br><span class="hljs-comment"> *   <span class="hljs-doctag">@class <span class="hljs-variable">MyPromise</span></span></span><br><span class="hljs-comment"> *   <span class="hljs-doctag">@constructor </span>excutor 构造函数，函数接收俩个回调函数，回调函数</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyPromise</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">excutor</span>)</span> &#123;<br>        excutor(<span class="hljs-built_in">this</span>.resolve, <span class="hljs-built_in">this</span>.reject)<br>    &#125;<br>    <span class="hljs-comment">// 默认状态为 pending(等待)</span><br>    status = PENDING<br>    <br>    <span class="hljs-comment">// 缓存状态值</span><br>    value = <span class="hljs-literal">undefined</span> <span class="hljs-comment">// 成功状态 【参数】</span><br>    reason = <span class="hljs-literal">undefined</span> <span class="hljs-comment">// 失败状态 【原因】</span><br>    <span class="hljs-comment">// 缓存回调函数</span><br>    <br>    successCallback = [] <span class="hljs-comment">// 成功回调</span><br>    failCallback = [] <span class="hljs-comment">// 失败回调</span><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *   成功回调</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     *   <span class="hljs-doctag">@see </span>函数使用箭头函数，可以使 this 指向于当前 MyPromise 对象</span><br><span class="hljs-comment">     */</span><br>    resolve = <span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> &#123;<br>        <span class="hljs-comment">// 状态一旦确定不支持更改，return 出函数</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.status !== PENDING) <span class="hljs-keyword">return</span><br>        <br>        <span class="hljs-comment">// 更改状态为 fulfilled(成功)</span><br>        <span class="hljs-built_in">this</span>.status = FULFILLED<br>        <br>        <span class="hljs-comment">// 缓存成功回调 传递的值</span><br>        <span class="hljs-built_in">this</span>.value = value<br>        <br>        <span class="hljs-comment">// 执行成功回调</span><br>        <span class="hljs-keyword">while</span> (<span class="hljs-built_in">this</span>.successCallback.length) <span class="hljs-built_in">this</span>.successCallback.shift()(<span class="hljs-built_in">this</span>.value)<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 失败回调</span><br><span class="hljs-comment">     */</span><br>    reject = <span class="hljs-function">(<span class="hljs-params">reason</span>) =&gt;</span> &#123;<br>        <span class="hljs-comment">// 状态一旦确定不支持更改，return 出函数</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.status !== PENDING) <span class="hljs-keyword">return</span><br>        <br>        <span class="hljs-comment">// 更改状态为 rejected(失败)</span><br>        <span class="hljs-built_in">this</span>.status = REJECTED<br>        <br>        <span class="hljs-comment">// 缓存失败回调 传递的原因</span><br>        <span class="hljs-built_in">this</span>.reason = reason<br>        <br>        <span class="hljs-comment">// 执行失败回调</span><br>        <span class="hljs-keyword">while</span> (<span class="hljs-built_in">this</span>.failCallback.length) <span class="hljs-built_in">this</span>.failCallback.shift()(<span class="hljs-built_in">this</span>.reason)<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *   then 方法</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     *   <span class="hljs-doctag">@params <span class="hljs-type">&#123;function&#125;</span> </span>successCallback[成功回调]</span><br><span class="hljs-comment">     *   <span class="hljs-doctag">@params <span class="hljs-type">&#123;function&#125;</span> </span>failCallback[失败回调]</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-title">then</span>(<span class="hljs-params">successCallback, failCallback</span>)</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.status === FULFILLED) successCallback(<span class="hljs-built_in">this</span>.value)<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.status === REJECTED) failCallback(<span class="hljs-built_in">this</span>.reason)<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 缓存成功回调</span><br>            <span class="hljs-built_in">this</span>.successCallback.push(successCallback)<br>            <span class="hljs-comment">// 缓存失败回调</span><br>            <span class="hljs-built_in">this</span>.failCallback.push(failCallback)<br>        &#125;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-comment">// 测试当前 MyPromise</span><br><br><span class="hljs-keyword">let</span> promiseTest = <span class="hljs-function">(<span class="hljs-params">status, num</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> MyPromise(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>            <span class="hljs-keyword">if</span> (status) resolve(<span class="hljs-string">`成功：<span class="hljs-subst">$&#123;num&#125;</span>`</span>)<br>            <span class="hljs-keyword">else</span> reject(<span class="hljs-string">`失败：<span class="hljs-subst">$&#123;num&#125;</span>`</span>)<br>        &#125;, <span class="hljs-number">2000</span>)<br>    &#125;)<br>&#125;<br>promiseTest(<span class="hljs-literal">true</span>, <span class="hljs-number">1</span>).then(<span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;成功回调：&#x27;</span>, value)<br>&#125;, <span class="hljs-function">(<span class="hljs-params">reason</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;失败原因：&#x27;</span>, reason)<br>&#125;)<br>promiseTest(<span class="hljs-literal">false</span>, <span class="hljs-number">2</span>).then(<span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;成功回调：&#x27;</span>, value)<br>&#125;, <span class="hljs-function">(<span class="hljs-params">reason</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;失败原因：&#x27;</span>, reason)<br>&#125;)<br>promiseTest(<span class="hljs-literal">true</span>, <span class="hljs-number">3</span>).then(<span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;成功回调：&#x27;</span>, value)<br>&#125;, <span class="hljs-function">(<span class="hljs-params">reason</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;失败原因：&#x27;</span>, reason)<br>&#125;)<br><br></code></pre></td></tr></table></figure><h1 id="4-Promise-链式调用的特性实现"><a href="#4-Promise-链式调用的特性实现" class="headerlink" title="4- Promise 链式调用的特性实现"></a>4- Promise 链式调用的特性实现</h1><ol><li>链式调用过程中，then 方法的 successCallback[成功回调]、failCallback[失败回调]，是可选项。如果为空，则直接返回上一个 Promise 对象的返回值。</li><li>Promise 对象是支持链式调用的，在执行 then 方法的时候，最终会返回一个新的 Promise 对象。</li><li>返回的对象，不支持返回当前调用的 Promise 对象。</li><li>返回的对象如果是对象，则获取 promise 的返回值，依据返回值调用 resolve、reject。</li><li>返回值是普通值则，调用 resolve 方法。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><br><span class="hljs-comment">// Promise 的三个状态</span><br><span class="hljs-keyword">const</span> PENDING = <span class="hljs-string">&#x27;pending&#x27;</span> <span class="hljs-comment">// 等待</span><br><span class="hljs-keyword">const</span> FULFILLED = <span class="hljs-string">&#x27;fulfilled&#x27;</span> <span class="hljs-comment">// 成功</span><br><span class="hljs-keyword">const</span> REJECTED = <span class="hljs-string">&#x27;rejected&#x27;</span> <span class="hljs-comment">// 失败</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *   模拟 原生Promise</span><br><span class="hljs-comment"> *  </span><br><span class="hljs-comment"> *   <span class="hljs-doctag">@class <span class="hljs-variable">MyPromise</span></span></span><br><span class="hljs-comment"> *   <span class="hljs-doctag">@constructor </span>excutor 构造函数，函数接收俩个回调函数，回调函数</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyPromise</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">excutor</span>)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            excutor(<span class="hljs-built_in">this</span>.resolve, <span class="hljs-built_in">this</span>.reject)<br>        &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>            <span class="hljs-built_in">this</span>.reject(e)<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-comment">// 默认状态为 pending(等待)</span><br>    status = PENDING<br>    <br>    <span class="hljs-comment">// 缓存状态值</span><br>    value = <span class="hljs-literal">undefined</span> <span class="hljs-comment">// 成功状态 【参数】</span><br>    reason = <span class="hljs-literal">undefined</span> <span class="hljs-comment">// 失败状态 【原因】</span><br>    <br>    <span class="hljs-comment">// 缓存回调函数</span><br>    successCallback = [] <span class="hljs-comment">// 成功回调</span><br>    failCallback = [] <span class="hljs-comment">// 失败回调</span><br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *   成功回调</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     *   <span class="hljs-doctag">@see </span>函数使用箭头函数，可以使 this 指向于当前 MyPromise 对象</span><br><span class="hljs-comment">     */</span><br>    resolve = <span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> &#123;<br>        <span class="hljs-comment">// 状态一旦确定不支持更改，return 出函数</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.status !== PENDING) <span class="hljs-keyword">return</span><br>        <span class="hljs-comment">// 更改状态为 fulfilled(成功)</span><br>        <span class="hljs-built_in">this</span>.status = FULFILLED<br>        <span class="hljs-comment">// 缓存成功回调 传递的值</span><br>        <span class="hljs-built_in">this</span>.value = value<br>        <span class="hljs-comment">// 执行成功回调</span><br>        <span class="hljs-keyword">while</span> (<span class="hljs-built_in">this</span>.successCallback.length) <span class="hljs-built_in">this</span>.successCallback.shift()()<br>    &#125;<br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 失败回调</span><br><span class="hljs-comment">     */</span><br>    reject = <span class="hljs-function">(<span class="hljs-params">reason</span>) =&gt;</span> &#123;<br>        <span class="hljs-comment">// 状态一旦确定不支持更改，return 出函数</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.status !== PENDING) <span class="hljs-keyword">return</span><br>        <span class="hljs-comment">// 更改状态为 rejected(失败)</span><br>        <span class="hljs-built_in">this</span>.status = REJECTED<br>        <span class="hljs-comment">// 缓存失败回调 传递的原因</span><br>        <span class="hljs-built_in">this</span>.reason = reason<br>        <span class="hljs-comment">// 执行失败回调</span><br>        <span class="hljs-keyword">while</span> (<span class="hljs-built_in">this</span>.failCallback.length) <span class="hljs-built_in">this</span>.failCallback.shift()()<br>    &#125;<br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *   then 方法</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     *   <span class="hljs-doctag">@params <span class="hljs-type">&#123;function&#125;</span> </span>successCallback[成功回调]</span><br><span class="hljs-comment">     *   <span class="hljs-doctag">@params <span class="hljs-type">&#123;function&#125;</span> </span>failCallback[失败回调]</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-title">then</span>(<span class="hljs-params">successCallback, failCallback</span>)</span> &#123;<br>        <span class="hljs-comment">// 回调参数可以为空</span><br>        successCallback = successCallback ? successCallback : <span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> value<br>        failCallback = failCallback ? failCallback : <span class="hljs-function"><span class="hljs-params">reason</span> =&gt;</span> &#123; <span class="hljs-keyword">throw</span> reason &#125;<br>        <br>        <span class="hljs-keyword">const</span> promiseNext = <span class="hljs-keyword">new</span> MyPromise(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.status === FULFILLED) &#123;<br>                <span class="hljs-comment">// 当前代码块改变为异步状态，获取到 promiseNext 对象</span><br>                <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        <span class="hljs-comment">// 获取到回调结果</span><br>                        <span class="hljs-keyword">let</span> successNext = successCallback(<span class="hljs-built_in">this</span>.value)<br>                        <span class="hljs-comment">// 执行返回逻辑</span><br>                        resolvePromise(promiseNext, successNext, resolve, reject)<br>                    &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>                        reject(e)<br>                    &#125;<br>                &#125;, <span class="hljs-number">0</span>)<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.status === REJECTED) &#123;<br>                <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        <span class="hljs-comment">// 获取到回调结果</span><br>                        <span class="hljs-keyword">let</span> failNext = failCallback(<span class="hljs-built_in">this</span>.reason)<br>                        <span class="hljs-comment">// 执行返回逻辑</span><br>                        resolvePromise(promiseNext, failNext, resolve, reject)<br>                    &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>                        reject(e)<br>                    &#125;<br>                &#125;, <span class="hljs-number">0</span>)<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// 缓存成功回调</span><br>                <span class="hljs-built_in">this</span>.successCallback.push(<span class="hljs-function">() =&gt;</span> &#123;<br>                    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>                        <span class="hljs-keyword">try</span> &#123;<br>                            <span class="hljs-comment">// 获取到回调结果</span><br>                            <span class="hljs-keyword">let</span> successNext = successCallback(<span class="hljs-built_in">this</span>.value)<br>                            <span class="hljs-comment">// 执行返回逻辑</span><br>                            resolvePromise(promiseNext, successNext, resolve, reject)<br>                        &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>                            reject(e)<br>                        &#125;<br>                    &#125;, <span class="hljs-number">0</span>)<br>                &#125;)<br>                <span class="hljs-comment">// 缓存失败回调</span><br>                <span class="hljs-built_in">this</span>.failCallback.push(<span class="hljs-function">() =&gt;</span> &#123;<br>                    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>                        <span class="hljs-keyword">try</span> &#123;<br>                            <span class="hljs-comment">// 获取到回调结果</span><br>                            <span class="hljs-keyword">let</span> failNext = failCallback(<span class="hljs-built_in">this</span>.reason)<br>                            <span class="hljs-comment">// 执行返回逻辑</span><br>                            resolvePromise(promiseNext, failNext, resolve, reject)<br>                        &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>                            reject(e)<br>                        &#125;<br>                    &#125;, <span class="hljs-number">0</span>)<br>                &#125;)<br>            &#125;<br>        &#125;)<br>        <span class="hljs-comment">// 链式调用，返回新的Promise</span><br>        <span class="hljs-keyword">return</span> promiseNext<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 链式调用处理回调函数</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">resolvePromise</span>(<span class="hljs-params">promise, next, resolve, reject</span>) </span>&#123;<br>    <span class="hljs-comment">// 禁止返回当前 Promise</span><br>    <span class="hljs-keyword">if</span> (promise === next) <span class="hljs-keyword">return</span> reject(<span class="hljs-keyword">new</span> <span class="hljs-built_in">TypeError</span>(<span class="hljs-string">&#x27;Chaining cycle detected for promise #&lt;Promise&gt;&#x27;</span>))<br>    <span class="hljs-comment">// 判断当前返值状态</span><br>    <span class="hljs-keyword">if</span> (next <span class="hljs-keyword">instanceof</span> MyPromise) next.then(resolve, reject) <span class="hljs-comment">// 如果 返回值为 Promise 对象，则获取到返回值，并调用 resolve、reject 方法传递</span><br>    <span class="hljs-keyword">else</span> resolve(next) <span class="hljs-comment">// 如果是普通值，则直接调用 resolve 方法</span><br>&#125;<br><br><br><span class="hljs-comment">// 测试当前 MyPromise</span><br><br><span class="hljs-keyword">let</span> promiseTest = <span class="hljs-function">(<span class="hljs-params">status, num</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> MyPromise(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>        <span class="hljs-comment">// setTimeout(() =&gt; &#123;</span><br>            <span class="hljs-keyword">if</span> (status) resolve(<span class="hljs-string">`成功：<span class="hljs-subst">$&#123;num&#125;</span>`</span>)<br>            <span class="hljs-keyword">else</span> reject(<span class="hljs-string">`失败：<span class="hljs-subst">$&#123;num&#125;</span>`</span>)<br>        <span class="hljs-comment">// &#125;, 2000)</span><br>    &#125;)<br>&#125;<br><br><span class="hljs-comment">// 链式调用</span><br>promiseTest(<span class="hljs-literal">true</span>, <span class="hljs-number">1</span>).then(<span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;成功回调：&#x27;</span>, value)<br>    <span class="hljs-keyword">throw</span> <span class="hljs-built_in">Error</span>(value.replace(<span class="hljs-regexp">/成功/</span>, <span class="hljs-string">&#x27;失败&#x27;</span>).replace(<span class="hljs-regexp">/[0-9]/g</span>, <span class="hljs-number">2</span>))<br>&#125;, <span class="hljs-function">(<span class="hljs-params">reason</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;失败原因：&#x27;</span>, reason)<br>&#125;).then(<span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;成功回调：&#x27;</span>, value)<br>    <span class="hljs-keyword">return</span> value.replace(<span class="hljs-regexp">/[0-9]/g</span>, <span class="hljs-number">3</span>)<br>&#125;, <span class="hljs-function">(<span class="hljs-params">reason</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;失败原因：&#x27;</span>, reason)<br>    <span class="hljs-keyword">return</span> (reason &amp;&amp; reason.message || <span class="hljs-string">&#x27;失败：3&#x27;</span>).replace(<span class="hljs-regexp">/失败/</span>, <span class="hljs-string">&#x27;失败 -&gt; 成功&#x27;</span>).replace(<span class="hljs-regexp">/[0-9]/g</span>, <span class="hljs-string">&#x27;2 -&gt; 3&#x27;</span>)<br>&#125;).then(<span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;成功回调：&#x27;</span>, value)<br>    <span class="hljs-keyword">return</span> value.replace(<span class="hljs-regexp">/[0-9]/g</span>, <span class="hljs-number">4</span>)<br>&#125;, <span class="hljs-function">(<span class="hljs-params">reason</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;失败原因：&#x27;</span>, reason)<br>&#125;)<br><br><span class="hljs-comment">// 参数可选</span><br>promiseTest(<span class="hljs-literal">true</span>, <span class="hljs-number">100</span>).then().then().then(<span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;value&#x27;</span>, value))<br>promiseTest(<span class="hljs-literal">false</span>, -<span class="hljs-number">100</span>).then().then().then(<span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> <span class="hljs-built_in">console</span>.log(value), <span class="hljs-function">(<span class="hljs-params">reason</span>) =&gt;</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;reason&#x27;</span>, reason))<br><br></code></pre></td></tr></table></figure><h1 id="5-Promise-中的-all、resolve、finally、catch-方法"><a href="#5-Promise-中的-all、resolve、finally、catch-方法" class="headerlink" title="5- Promise 中的 all、resolve、finally、catch 方法"></a>5- Promise 中的 all、resolve、finally、catch 方法</h1><ul><li><p>Promise 中的 all 方法</p><ol><li>all 方法是一 Promise 的静态方法，可以直接调用。</li><li>接收的参数为数组，数组中可以有普通值、同步方法、异步方法。</li><li>调用 all 方法后，会依次按顺序执行形参中的数组包含的值或方法。每个值或执行方法后，获取到的结果应按形参中的顺序缓存。</li><li>all 方法最终的返回值是一个 Promise 对象。如果形参中的每个方法都得以正确执行，没有异常则调用 Promise 对象中的 resolve 方法，把最终结果缓存至返回的 Promise 对象中。如果有异常则把异常的原因，则调用 Promise 对象中的 reject 方法，缓存失败原因。</li><li>执行 then 方法就可以获取到，all 顺利完整执行的结果，或某一个状态失败的原因。</li></ol></li><li><p>Promise 中的 resolve 方法</p><ol><li> resolve 方法也是一个 Promise 的静态方法，可以直接调用。</li><li> resolve 方法接收一个参数，这个参数可以是普通值，也可以是异步方法。</li><li> 如果接收到的值是普通值，则包装为 Promise 方法后，返回这个 Promise 方法。</li><li> 如果接收到的值是异步方法，则直接返回这个方法。</li></ol></li><li><p>Promise 中的 finally 方法</p><ol><li> finally 方法在 Promise 对象执行后，无论结果是 fulfilled 或 rejected，都会被执行。</li><li> finally 返回值应为一个 Promise 对象，并且继承当前 Promise 对象的状态。</li><li> finally 对象由于无法知道 Promise 的状态，所以回调函数函数不接收任何参数，仅用于无论 Promise 对象何种状态，都要执行的情况。</li></ol></li><li><p>Promise 中的 catch 方法</p><ol><li> catch 方法会捕获 Promise 的失败状态。</li><li> catch 方法内部为调用 then 方法，第一个参数，成功状态为空。</li></ol></li></ul><h1 id="6-完整的-Promise-对象"><a href="#6-完整的-Promise-对象" class="headerlink" title="6- 完整的 Promise 对象"></a>6- 完整的 Promise 对象</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><br><span class="hljs-comment">// Promise 的三个状态</span><br><span class="hljs-keyword">const</span> PENDING = <span class="hljs-string">&#x27;pending&#x27;</span> <span class="hljs-comment">// 等待</span><br><span class="hljs-keyword">const</span> FULFILLED = <span class="hljs-string">&#x27;fulfilled&#x27;</span> <span class="hljs-comment">// 成功</span><br><span class="hljs-keyword">const</span> REJECTED = <span class="hljs-string">&#x27;rejected&#x27;</span> <span class="hljs-comment">// 失败</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *   模拟 原生Promise</span><br><span class="hljs-comment"> *  </span><br><span class="hljs-comment"> *   <span class="hljs-doctag">@class <span class="hljs-variable">MyPromise</span></span></span><br><span class="hljs-comment"> *   <span class="hljs-doctag">@constructor </span>excutor 构造函数，函数接收俩个回调函数，回调函数</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyPromise</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">excutor</span>)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            excutor(<span class="hljs-built_in">this</span>.resolve, <span class="hljs-built_in">this</span>.reject)<br>        &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>            <span class="hljs-built_in">this</span>.reject(e)<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-comment">// 默认状态为 pending(等待)</span><br>    status = PENDING<br>    <br>    <span class="hljs-comment">// 缓存状态值</span><br>    value = <span class="hljs-literal">undefined</span> <span class="hljs-comment">// 成功状态 【参数】</span><br>    reason = <span class="hljs-literal">undefined</span> <span class="hljs-comment">// 失败状态 【原因】</span><br>    <br>    <span class="hljs-comment">// 缓存回调函数</span><br>    successCallback = [] <span class="hljs-comment">// 成功回调</span><br>    failCallback = [] <span class="hljs-comment">// 失败回调</span><br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *   成功回调</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     *   <span class="hljs-doctag">@see </span>函数使用箭头函数，可以使 this 指向于当前 MyPromise 对象</span><br><span class="hljs-comment">     */</span><br>    resolve = <span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> &#123;<br>        <span class="hljs-comment">// 状态一旦确定不支持更改，return 出函数</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.status !== PENDING) <span class="hljs-keyword">return</span><br>        <span class="hljs-comment">// 更改状态为 fulfilled(成功)</span><br>        <span class="hljs-built_in">this</span>.status = FULFILLED<br>        <span class="hljs-comment">// 缓存成功回调 传递的值</span><br>        <span class="hljs-built_in">this</span>.value = value<br>        <span class="hljs-comment">// 执行成功回调</span><br>        <span class="hljs-keyword">while</span> (<span class="hljs-built_in">this</span>.successCallback.length) <span class="hljs-built_in">this</span>.successCallback.shift()()<br>    &#125;<br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 失败回调</span><br><span class="hljs-comment">     */</span><br>    reject = <span class="hljs-function">(<span class="hljs-params">reason</span>) =&gt;</span> &#123;<br>        <span class="hljs-comment">// 状态一旦确定不支持更改，return 出函数</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.status !== PENDING) <span class="hljs-keyword">return</span><br>        <span class="hljs-comment">// 更改状态为 rejected(失败)</span><br>        <span class="hljs-built_in">this</span>.status = REJECTED<br>        <span class="hljs-comment">// 缓存失败回调 传递的原因</span><br>        <span class="hljs-built_in">this</span>.reason = reason<br>        <span class="hljs-comment">// 执行失败回调</span><br>        <span class="hljs-keyword">while</span> (<span class="hljs-built_in">this</span>.failCallback.length) <span class="hljs-built_in">this</span>.failCallback.shift()()<br>    &#125;<br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *   then 方法</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     *   <span class="hljs-doctag">@params <span class="hljs-type">&#123;function&#125;</span> </span>successCallback[成功回调]</span><br><span class="hljs-comment">     *   <span class="hljs-doctag">@params <span class="hljs-type">&#123;function&#125;</span> </span>failCallback[失败回调]</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-title">then</span>(<span class="hljs-params">successCallback, failCallback</span>)</span> &#123;<br>        <span class="hljs-comment">// 回调参数可以为空</span><br>        successCallback = successCallback ? successCallback : <span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> value<br>        failCallback = failCallback ? failCallback : <span class="hljs-function"><span class="hljs-params">reason</span> =&gt;</span> &#123; <span class="hljs-keyword">throw</span> reason &#125;<br>        <br>        <span class="hljs-keyword">const</span> promiseNext = <span class="hljs-keyword">new</span> MyPromise(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.status === FULFILLED) &#123;<br>                <span class="hljs-comment">// 当前代码块改变为异步状态，获取到 promiseNext 对象</span><br>                <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        <span class="hljs-comment">// 获取到回调结果</span><br>                        <span class="hljs-keyword">let</span> successNext = successCallback(<span class="hljs-built_in">this</span>.value)<br>                        <span class="hljs-comment">// 执行返回逻辑</span><br>                        resolvePromise(promiseNext, successNext, resolve, reject)<br>                    &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>                        reject(e)<br>                    &#125;<br>                &#125;, <span class="hljs-number">0</span>)<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.status === REJECTED) &#123;<br>                <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        <span class="hljs-comment">// 获取到回调结果</span><br>                        <span class="hljs-keyword">let</span> failNext = failCallback(<span class="hljs-built_in">this</span>.reason)<br>                        <span class="hljs-comment">// 执行返回逻辑</span><br>                        resolvePromise(promiseNext, failNext, resolve, reject)<br>                    &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>                        reject(e)<br>                    &#125;<br>                &#125;, <span class="hljs-number">0</span>)<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// 缓存成功回调</span><br>                <span class="hljs-built_in">this</span>.successCallback.push(<span class="hljs-function">() =&gt;</span> &#123;<br>                    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>                        <span class="hljs-keyword">try</span> &#123;<br>                            <span class="hljs-comment">// 获取到回调结果</span><br>                            <span class="hljs-keyword">let</span> successNext = successCallback(<span class="hljs-built_in">this</span>.value)<br>                            <span class="hljs-comment">// 执行返回逻辑</span><br>                            resolvePromise(promiseNext, successNext, resolve, reject)<br>                        &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>                            reject(e)<br>                        &#125;<br>                    &#125;, <span class="hljs-number">0</span>)<br>                &#125;)<br>                <span class="hljs-comment">// 缓存失败回调</span><br>                <span class="hljs-built_in">this</span>.failCallback.push(<span class="hljs-function">() =&gt;</span> &#123;<br>                    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>                        <span class="hljs-keyword">try</span> &#123;<br>                            <span class="hljs-comment">// 获取到回调结果</span><br>                            <span class="hljs-keyword">let</span> failNext = failCallback(<span class="hljs-built_in">this</span>.reason)<br>                            <span class="hljs-comment">// 执行返回逻辑</span><br>                            resolvePromise(promiseNext, failNext, resolve, reject)<br>                        &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>                            reject(e)<br>                        &#125;<br>                    &#125;, <span class="hljs-number">0</span>)<br>                &#125;)<br>            &#125;<br>        &#125;)<br>        <span class="hljs-comment">// 链式调用，返回新的Promise</span><br>        <span class="hljs-keyword">return</span> promiseNext<br>    &#125;<br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    *   Promise 对象的 finally 方法</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-function"><span class="hljs-title">finally</span>(<span class="hljs-params">callback</span>)</span> &#123;<br>        <span class="hljs-comment">// 调用   then 方法，获取 Promise 的状态，并返回</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.then(<br>                <span class="hljs-comment">// 传递成功值，并把 回调函数包装为 Promise 对象 返回</span><br>                (value) =&gt; MyPromise.resolve(callback()).then(<span class="hljs-function">() =&gt;</span> value),<br>                <span class="hljs-comment">// 传递失败原因，并把 回调函数包装为 Promise 对象 返回</span><br>                (reason) =&gt; MyPromise.resolve(callback().then(<span class="hljs-function">() =&gt;</span> &#123; <span class="hljs-keyword">throw</span> reason &#125;)<br>            ))<br>    &#125;<br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    *   Promise 对象的 then 方法</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">catch</span>(callback) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.then(<span class="hljs-literal">undefined</span>, callback)<br>    &#125;<br>    <br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    *   Promise 对象的 all 方法</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-title">all</span>(<span class="hljs-params">array</span>)</span> &#123;<br>        <span class="hljs-comment">// 缓存最终结果</span><br>        <span class="hljs-keyword">let</span> result = []<br>        <span class="hljs-comment">// 缓存结果的</span><br>        <span class="hljs-keyword">let</span> count = <span class="hljs-number">0</span><br>        <span class="hljs-comment">// 返回 Promise 对象</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> MyPromise(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>            <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">addData</span>(<span class="hljs-params">key, value</span>) </span>&#123;<br>                <span class="hljs-comment">// 按下标缓存最终值</span><br>                result[key] = value<br>                <br>                <span class="hljs-comment">// 缓存值的次数</span><br>                count++<br>                <br>                <span class="hljs-comment">// 缓存值的次数，等于 all 形参的长度，则代表所有方法或值都缓存至结果</span><br>                <span class="hljs-keyword">if</span> (count === array.length) resolve(result)<br>            &#125;<br>            <br>            <span class="hljs-comment">// 循环依次执行</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; array.length; i++) &#123;<br>                <span class="hljs-comment">// 获取当前执行</span><br>                <span class="hljs-keyword">let</span> current = array[i]<br>                <span class="hljs-comment">// 异步方法处理</span><br>                <span class="hljs-keyword">if</span> (current <span class="hljs-keyword">instanceof</span> MyPromise) &#123;<br>                    current.then(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> addData(i, value), <span class="hljs-function"><span class="hljs-params">reason</span> =&gt;</span> resolve(reason))<br>                &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// 普通值处理</span><br>                    addData(i, current)<br>                &#125;<br>            &#125;<br>        &#125;)<br>    &#125;<br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    *   Promise 对象的 resolve 方法</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-title">resolve</span>(<span class="hljs-params">value</span>)</span> &#123;<br>        <span class="hljs-keyword">if</span> (value <span class="hljs-keyword">instanceof</span> MyPromise) <span class="hljs-keyword">return</span> value <span class="hljs-comment">// Promise 对象则直接返回</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> MyPromise(<span class="hljs-function"><span class="hljs-params">resolve</span> =&gt;</span> resolve(value)) <span class="hljs-comment">// 普通值，则包装为异步方法</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 链式调用处理回调函数</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">resolvePromise</span>(<span class="hljs-params">promise, next, resolve, reject</span>) </span>&#123;<br>    <span class="hljs-comment">// 禁止返回当前 Promise</span><br>    <span class="hljs-keyword">if</span> (promise === next) <span class="hljs-keyword">return</span> reject(<span class="hljs-keyword">new</span> <span class="hljs-built_in">TypeError</span>(<span class="hljs-string">&#x27;Chaining cycle detected for promise #&lt;Promise&gt;&#x27;</span>))<br>    <span class="hljs-comment">// 判断当前返值状态</span><br>    <span class="hljs-keyword">if</span> (next <span class="hljs-keyword">instanceof</span> MyPromise) next.then(resolve, reject) <span class="hljs-comment">// 如果 返回值为 Promise 对象，则获取到返回值，并调用 resolve、reject 方法传递</span><br>    <span class="hljs-keyword">else</span> resolve(next) <span class="hljs-comment">// 如果是普通值，则直接调用 resolve 方法</span><br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>JS基础</tag>
      
      <tag>Promise</tag>
      
      <tag>JS原理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解决方案：uni-app非nvue模式下切换主题后，App端闪屏、闪白、闪黑、状态栏主题色不稳定</title>
    <link href="/2021/03/20/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%EF%BC%9Auni-app%E9%9D%9Envue%E6%A8%A1%E5%BC%8F%E4%B8%8B%E5%88%87%E6%8D%A2%E4%B8%BB%E9%A2%98%E5%90%8E%EF%BC%8CApp%E7%AB%AF%E9%97%AA%E5%B1%8F%E3%80%81%E9%97%AA%E7%99%BD%E3%80%81%E9%97%AA%E9%BB%91%E3%80%81%E7%8A%B6%E6%80%81%E6%A0%8F%E4%B8%BB%E9%A2%98%E8%89%B2%E4%B8%8D%E7%A8%B3%E5%AE%9A/"/>
    <url>/2021/03/20/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%EF%BC%9Auni-app%E9%9D%9Envue%E6%A8%A1%E5%BC%8F%E4%B8%8B%E5%88%87%E6%8D%A2%E4%B8%BB%E9%A2%98%E5%90%8E%EF%BC%8CApp%E7%AB%AF%E9%97%AA%E5%B1%8F%E3%80%81%E9%97%AA%E7%99%BD%E3%80%81%E9%97%AA%E9%BB%91%E3%80%81%E7%8A%B6%E6%80%81%E6%A0%8F%E4%B8%BB%E9%A2%98%E8%89%B2%E4%B8%8D%E7%A8%B3%E5%AE%9A/</url>
    
    <content type="html"><![CDATA[<ul><li>主题切换采用的方案是 css 变量，但此方案理论上可以解决任何因为切换主题而引起的闪屏</li><li>使用的编译版本是 3.1.X (也就是HBuilderx的版本号)</li><li>2.6.X 之后禁止在js内动态引入css。因为2.6.X之后好像默认都是V3版本编译，所以这是一条死路</li></ul><blockquote><p>问题初探：<br>uni-app 使用非nvue模式进行编译App，会使用 web-view进行渲染。调试过程中发现，在进行加载静态资源的时候会首先读取默认的配置文件，并进行App主题的初始化，并且在加载其它页面的时候也会去重载默认的配置文件，然后再以加载我们正常的业务页面，在渲染业务页面之前的这段时间内，主题色会一直保持manifest.json内默认的配置色，或在main.js文件中预先加载的主题色。所以以这个思路去处理一下加载的静态文件，以处理切换主题色后闪屏的问题。</p></blockquote><h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><h2 id="给App添加主题色的缓存标识"><a href="#给App添加主题色的缓存标识" class="headerlink" title="给App添加主题色的缓存标识"></a>给App添加主题色的缓存标识</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">plus.storage.setItem(<span class="hljs-string">&quot;theme&quot;</span>, <span class="hljs-built_in">this</span>.color)<br></code></pre></td></tr></table></figure><p>这段代码是通过 <a href="https://www.html5plus.org/doc/h5p.html">HTML5+</a>的Api，为App添加主题标识的缓存。最佳放置位置为业务页面中，切换主题色的函数内（点击按钮切换主题时触发的函数内）。</p><h2 id="新建-uniappview-html-文件"><a href="#新建-uniappview-html-文件" class="headerlink" title="新建 __uniappview.html 文件"></a>新建 __uniappview.html 文件</h2><blockquote><p>__uniappview.html 文件是uni-app App 模式的入口页，所以在这里修改比较合理</p></blockquote><p>__uniappview.html 源文件：<a href="https://github.com/dcloudio/uni-app/blob/master/packages/uni-app-plus/template/v3/__uniappview.html">github</a></p><p>新建：__uniappview.html (建议放至 [ assets ] 目录下，默认是没有这个目录)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh-CN&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript"><span class="hljs-keyword">var</span> __UniViewStartTime__ = <span class="hljs-built_in">Date</span>.now();</span><br><span class="javascript"><span class="hljs-keyword">var</span> coverSupport = <span class="hljs-string">&#x27;CSS&#x27;</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">window</span> &amp;&amp; <span class="hljs-keyword">typeof</span> CSS.supports === <span class="hljs-string">&#x27;function&#x27;</span> &amp;&amp; (CSS.supports(<span class="hljs-string">&#x27;top: env(a)&#x27;</span>) ||</span><br><span class="javascript">CSS.supports(<span class="hljs-string">&#x27;top: constant(a)&#x27;</span>))</span><br><span class="javascript"><span class="hljs-built_in">document</span>.write(</span><br><span class="javascript"><span class="hljs-string">&#x27;&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&#x27;</span> +</span><br><span class="javascript">(coverSupport ? <span class="hljs-string">&#x27;, viewport-fit=cover&#x27;</span> : <span class="hljs-string">&#x27;&#x27;</span>) + <span class="hljs-string">&#x27;&quot; /&gt;&#x27;</span>)</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>View<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">PlusReady</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><br><span class="javascript"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> PlusReady.instance === <span class="hljs-string">&#x27;object&#x27;</span>) &#123;</span><br><span class="javascript"><span class="hljs-keyword">return</span> PlusReady.instance</span><br>&#125;<br><br><span class="javascript"><span class="hljs-comment">// 获取app缓存的主题类型</span></span><br><span class="javascript"><span class="hljs-built_in">this</span>.color = plus.storage.getItem(<span class="hljs-string">&#x27;theme&#x27;</span>)</span><br><span class="javascript"><span class="hljs-built_in">this</span>.cssPath = <span class="hljs-string">&#x27;&#x27;</span></span><br><span class="javascript"><span class="hljs-comment">// 根节点,用于保存页面根样式，防止切换页面闪屏的样式</span></span><br><span class="javascript"><span class="hljs-built_in">this</span>.style = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;style&#x27;</span>)</span><br><span class="javascript"><span class="hljs-built_in">this</span>.link = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;link&#x27;</span>)</span><br><span class="javascript"><span class="hljs-comment">// dom 是否更新过</span></span><br><span class="javascript"><span class="hljs-built_in">this</span>.domStatus = <span class="hljs-literal">false</span></span><br><br><span class="javascript"><span class="hljs-built_in">this</span>.setTheme = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript"><span class="hljs-comment">// 依据主题类型初始化主题相关值</span></span><br><span class="javascript"><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.color == <span class="hljs-string">&#x27;black&#x27;</span>) &#123;</span><br><span class="javascript">plus.navigator.setStatusBarStyle(<span class="hljs-string">&#x27;light&#x27;</span>) <span class="hljs-comment">// 设置原生bar主题为浅色</span></span><br><span class="javascript"><span class="hljs-built_in">this</span>.cssPath = <span class="hljs-string">&quot;static/css/black.css&quot;</span> <span class="hljs-comment">// 加载深色主题</span></span><br><span class="javascript"><span class="hljs-built_in">this</span>.style.innerText =</span><br>`<br>        body, html, #app, page &#123;<br>          background: #1E1E1E !important;<br>        &#125;<br>      ` // 设置根节点为深色，防止切换页面闪白<br><span class="javascript">&#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="javascript">plus.navigator.setStatusBarStyle(<span class="hljs-string">&quot;dark&quot;</span>) <span class="hljs-comment">// 设置原生bar主题为深色</span></span><br><span class="javascript"><span class="hljs-built_in">this</span>.cssPath = <span class="hljs-string">&quot;static/css/white.css&quot;</span> <span class="hljs-comment">// 加载浅色主题</span></span><br><span class="javascript"><span class="hljs-built_in">this</span>.style.innerText =</span><br>`<br>        body, html, #app, page &#123;<br>          background: #FFFFFF !important;<br>        &#125;<br>      ` // 设置根节点为浅色，防止切换页面闪黑<br>&#125;<br><span class="javascript"><span class="hljs-comment">// 初始化link</span></span><br><span class="javascript"><span class="hljs-built_in">this</span>.link.type = <span class="hljs-string">&#x27;text/css&#x27;</span>;</span><br><span class="javascript"><span class="hljs-built_in">this</span>.link.rel = <span class="hljs-string">&#x27;stylesheet&#x27;</span>;</span><br><span class="javascript"><span class="hljs-built_in">this</span>.link.href = <span class="hljs-built_in">this</span>.cssPath;</span><br>&#125;<br><br><span class="javascript"><span class="hljs-built_in">this</span>.pushHead = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript"><span class="hljs-comment">// 节点载入head</span></span><br><span class="javascript"><span class="hljs-built_in">document</span>.head.appendChild(<span class="hljs-built_in">this</span>.link)</span><br><span class="javascript"><span class="hljs-built_in">document</span>.head.appendChild(<span class="hljs-built_in">this</span>.style)</span><br>&#125;<br><br><span class="javascript"><span class="hljs-keyword">return</span> PlusReady.instance = <span class="hljs-built_in">this</span></span><br>&#125;<br><span class="javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">plusReadyTheme</span> (<span class="hljs-params">str</span>) </span>&#123;</span><br><span class="javascript"><span class="hljs-keyword">let</span> plusReady = <span class="hljs-keyword">new</span> PlusReady()</span><br><span class="javascript">plusReady.color = plus.storage.getItem(<span class="hljs-string">&quot;theme&quot;</span>)</span><br>plusReady.setTheme()<br>&#125;<br><span class="javascript"><span class="hljs-keyword">if</span> (<span class="hljs-built_in">window</span>.plus) &#123;</span><br><span class="javascript"><span class="hljs-keyword">let</span> plusReady = <span class="hljs-keyword">new</span> PlusReady()</span><br>plusReady.setTheme()<br>plusReady.pushHead()<br><span class="javascript">&#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="javascript"><span class="hljs-comment">// h5+ 加载后，初始化参数并添加dom到head</span></span><br><span class="javascript"><span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">&#x27;plusready&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript"><span class="hljs-keyword">let</span> plusReady = <span class="hljs-keyword">new</span> PlusReady()</span><br>plusReady.setTheme()<br>if (!plusReady.domStatus) &#123;<br>plusReady.pushHead()<br>&#125;<br><span class="javascript">&#125;, <span class="hljs-literal">false</span>);</span><br>&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;view.css&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;__uniappes6.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;view.umd.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;app-view.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>在调试过程中发现，首先加载的是这个HTML，所以把设置主题色的代码放在了这个HTML<br>。这个HTML是在编译过程中导入的入口文件，每次离线打包后也可看到这个文件。</p><h2 id="引入-copy-webpack-plugin-依赖"><a href="#引入-copy-webpack-plugin-依赖" class="headerlink" title="引入 copy-webpack-plugin 依赖"></a>引入 copy-webpack-plugin 依赖</h2><blockquote><p>项目内使用的是：5.0.0 版本</p></blockquote><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">npm install -S <span class="hljs-built_in">copy</span>-webpack-plugin<br></code></pre></td></tr></table></figure><h2 id="创建-vue-config-js-文件"><a href="#创建-vue-config-js-文件" class="headerlink" title="创建 vue.config.js 文件"></a>创建 vue.config.js 文件</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>)<br><span class="hljs-keyword">const</span> CopyWebpackPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;copy-webpack-plugin&#x27;</span>)<br><br><span class="hljs-built_in">module</span>.exports = &#123;<br>    configureWebpack: &#123;<br>        plugins: [<br>            <span class="hljs-keyword">new</span> CopyWebpackPlugin([<br>                &#123;<br>                    <span class="hljs-keyword">from</span>: path.join(__dirname, <span class="hljs-string">&#x27;assets&#x27;</span>), <span class="hljs-comment">// 项目内把 __uniappview.html 文件放在了 assets 目录下</span><br>force: <span class="hljs-literal">true</span> <span class="hljs-comment">// 强制覆盖</span><br>                &#125;<br>            ])<br>        ]<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="状态栏颜色不稳定"><a href="#状态栏颜色不稳定" class="headerlink" title="状态栏颜色不稳定"></a>状态栏颜色不稳定</h2><blockquote><p>这个问题也是默认配置的坑，初步观察的原理很简单，就是页面已经渲染出来了，但是又做了跳转当前页面动作、之类的动作，导致页面没有重新加载，但是配置重新加载了~ 所以uni-app的壳就把状态栏主题色恢复为默认了。<br>解决办法就是只要当前页面栈已经存在某个页面，就不做跳转之类的动作！</p></blockquote><h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>以上方案，可解决闪屏问题，但是有一个小问题。就是在切换主题色后，切换的第一个页面还会闪一下。业务至此，接着搬下一块砖！！！ 有更好的解决方案，或谁把这个遗留问题解决了下方评论，万分感激~</p>]]></content>
    
    
    <categories>
      
      <category>uni-app</category>
      
    </categories>
    
    
    <tags>
      
      <tag>uni-app</tag>
      
      <tag>app</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解决方案：js文件流、base64、Bolb、File、文件上传的使用</title>
    <link href="/2020/12/14/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%EF%BC%9Ajs%E6%96%87%E4%BB%B6%E6%B5%81%E3%80%81base64%E3%80%81Bolb%E3%80%81File%E3%80%81%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2020/12/14/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%EF%BC%9Ajs%E6%96%87%E4%BB%B6%E6%B5%81%E3%80%81base64%E3%80%81Bolb%E3%80%81File%E3%80%81%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="文件上传获取文件流"><a href="#文件上传获取文件流" class="headerlink" title="文件上传获取文件流"></a>文件上传获取文件流</h1><ol><li>创建input 获取文件<br> <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/Input/file">input file MDN文档</a> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">file</span> <span class="hljs-attr">name</span>=<span class="hljs-string">file</span>&gt;</span> <span class="hljs-comment">&lt;!-- 属性值可以省略引号，以达到缩减文件大小的目的 --&gt;</span><br></code></pre></td></tr></table></figure></li><li>获取input 内的文件流<br> 返回值默认为集合（数组） <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;input[name=file]&quot;</span>).files<br></code></pre></td></tr></table></figure> <img src="https://img-blog.csdnimg.cn/202012141608083.png" alt="在这里插入图片描述"><h1 id="文件转换为Base64"><a href="#文件转换为Base64" class="headerlink" title="文件转换为Base64"></a>文件转换为Base64</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isBase64</span>(<span class="hljs-params">str</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (str === <span class="hljs-string">&#x27;&#x27;</span> || str.trim() === <span class="hljs-string">&#x27;&#x27;</span>) &#123; <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; &#125;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">return</span> btoa(atob(str)) == str<br>    &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getBase64</span>(<span class="hljs-params">file</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">Object</span>.prototype.toString.call(file) === <span class="hljs-string">&quot;[object String]&quot;</span> &amp;&amp; isBase64((file <span class="hljs-keyword">as</span> any))) &#123;<br>                resolve(file)<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">const</span> reader = <span class="hljs-keyword">new</span> FileReader()<br>                reader.readAsDataURL((file <span class="hljs-keyword">as</span> any))<br>                reader.onload = <span class="hljs-function">() =&gt;</span> resolve(reader.result)<br>                reader.onerror = <span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> reject(error)<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (err) &#123; <span class="hljs-comment">// 发生错误回调</span><br>            reject(err)<br>        &#125;<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Base64-转换为二进制"><a href="#Base64-转换为二进制" class="headerlink" title="Base64 转换为二进制"></a>Base64 转换为二进制</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">base64ToBlob</span>(<span class="hljs-params">urlData, type</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> arr = urlData.split(<span class="hljs-string">&#x27;,&#x27;</span>)<br>    <span class="hljs-keyword">let</span> mime, bytes<br>    <span class="hljs-keyword">if</span> (arr &amp;&amp; arr.length === <span class="hljs-number">2</span>) &#123;<br>        mime = (arr[<span class="hljs-number">0</span>] <span class="hljs-keyword">as</span> any).match(<span class="hljs-regexp">/:(.*?);/</span>)[<span class="hljs-number">1</span>] || type<br>        <span class="hljs-comment">// 去掉url的头，并转化为byte</span><br>        bytes = <span class="hljs-built_in">window</span>.atob(arr[<span class="hljs-number">1</span>])<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        mime = type<br>        <span class="hljs-comment">// 去掉url的头，并转化为byte</span><br>        bytes = <span class="hljs-built_in">window</span>.atob(arr[<span class="hljs-number">0</span>])<br>    &#125;<br>    <span class="hljs-comment">// 处理异常,将ascii码小于0的转换为大于0</span><br>    <span class="hljs-keyword">let</span> ab = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ArrayBuffer</span>(bytes.length)<br>    <span class="hljs-comment">// 生成视图（直接针对内存）：8位无符号整数，长度1个字节</span><br>    <span class="hljs-keyword">let</span> ia = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Uint8Array</span>(ab)<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; bytes.length; i++) &#123;<br>        ia[i] = bytes.charCodeAt(i)<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Blob([ab], &#123;<br>        type: mime<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="二进制文件添加文件名"><a href="#二进制文件添加文件名" class="headerlink" title="二进制文件添加文件名"></a>二进制文件添加文件名</h1></li></ol><ul><li>文件上传时添加 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> formData = <span class="hljs-keyword">new</span> FormData()<br>formFata.append(<span class="hljs-string">&quot;file&quot;</span>, base64ToBlob(base64), name) <span class="hljs-comment">// file 为接口传递的字段，formData的属性值，name 为二进制文件的名称</span><br></code></pre></td></tr></table></figure></li><li>非文件上传时添加 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">new</span> File(base64ToBlob(base64), name) <span class="hljs-comment">// name 为需设置的文件名称</span><br></code></pre></td></tr></table></figure><h1 id="文件上传至服务器"><a href="#文件上传至服务器" class="headerlink" title="文件上传至服务器"></a>文件上传至服务器</h1>若使用第三方库，需修改 Content-Type 值为 multipart/form-data<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handleUpload</span> (<span class="hljs-params"></span>) </span>&#123;<br><span class="hljs-keyword">let</span> formData = <span class="hljs-keyword">new</span> FormData()<br>formData.append(<span class="hljs-string">&quot;file&quot;</span>, <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;input[name=file]&quot;</span>).files[<span class="hljs-number">0</span>], <span class="hljs-string">&quot;demo&quot;</span>)<br>xhr = <span class="hljs-keyword">new</span> XMLHttpRequest()<br>xhr.open(<span class="hljs-string">&quot;post&quot;</span>, url,<span class="hljs-literal">true</span>)<br>xhr.onload = uploadComplete <span class="hljs-comment">//请求完成</span><br>xhr.onerror =  uploadFailed <span class="hljs-comment">//请求失败</span><br>xhr.upload.onprogress = progressFunction<br>xhr.send(formData)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">uploadComplete</span>(<span class="hljs-params"></span>) </span>&#123;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;上传成功&quot;</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">uploadFailed</span>(<span class="hljs-params"></span>) </span>&#123;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;上传失败&quot;</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">progressFunction</span>(<span class="hljs-params">evt</span>) </span>&#123;<br><span class="hljs-keyword">let</span> loading = <span class="hljs-built_in">Math</span>.round(evt.loaded / evt.total * <span class="hljs-number">100</span>);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">`已上传<span class="hljs-subst">$&#123;loading&#125;</span>%`</span>)<br>&#125;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>webpack5： Error： Cannot find module ‘webpack-cli/bin/config-yargs‘</title>
    <link href="/2020/10/26/webpack5_%20Error_%20Cannot%20find%20module%20%E2%80%98webpack-cli_bin_config-yargs%E2%80%98/"/>
    <url>/2020/10/26/webpack5_%20Error_%20Cannot%20find%20module%20%E2%80%98webpack-cli_bin_config-yargs%E2%80%98/</url>
    
    <content type="html"><![CDATA[<h1 id="webpack5X版本报错："><a href="#webpack5X版本报错：" class="headerlink" title="webpack5X版本报错："></a>webpack5X版本报错：</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">Error: Cannot find module &#x27;webpack-cli/bin/config-yargs&#x27;<br></code></pre></td></tr></table></figure><h1 id="错误原因："><a href="#错误原因：" class="headerlink" title="错误原因："></a>错误原因：</h1><p>wbepack4X版本使用webpack-dev-server，启动方式为：webpack-dev-server。webpack5X修改为：webpack server</p><h1 id="webpack4X方式："><a href="#webpack4X方式：" class="headerlink" title="webpack4X方式："></a>webpack4X方式：</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">webpack-dev-server --mode development --config config/webpack.conf.js<br></code></pre></td></tr></table></figure><h1 id="webpack5X方式："><a href="#webpack5X方式：" class="headerlink" title="webpack5X方式："></a>webpack5X方式：</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">webpack serve --mode development --env development --config config/webpack.conf.js<br></code></pre></td></tr></table></figure><p>参考：<a href="https://github.com/webpack/webpack-dev-server/issues/2759">github webpack-dev-server issues</a></p>]]></content>
    
    
    <categories>
      
      <category>webpack</category>
      
    </categories>
    
    
    <tags>
      
      <tag>webpack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>实用技巧：win下的包管理工具、choco</title>
    <link href="/2020/09/18/%E5%AE%9E%E7%94%A8%E6%8A%80%E5%B7%A7%EF%BC%9Awin%E4%B8%8B%E7%9A%84%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7%E3%80%81choco/"/>
    <url>/2020/09/18/%E5%AE%9E%E7%94%A8%E6%8A%80%E5%B7%A7%EF%BC%9Awin%E4%B8%8B%E7%9A%84%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7%E3%80%81choco/</url>
    
    <content type="html"><![CDATA[<p><a href="https://chocolatey.org/">chocolatey</a>是win下的包管理工具，类似于centos中的yum。非常好用~</p><h2 id="1-使用管理员身份打开powerShell"><a href="#1-使用管理员身份打开powerShell" class="headerlink" title="1. 使用管理员身份打开powerShell"></a>1. 使用管理员身份打开powerShell</h2><h2 id="2-安装choco"><a href="#2-安装choco" class="headerlink" title="2. 安装choco"></a>2. 安装choco</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powerShell"><span class="hljs-built_in">iwr</span> https://chocolatey.org/install.ps1 <span class="hljs-literal">-UseBasicParsing</span> | <span class="hljs-built_in">iex</span> <br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200904150433557.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hfbWlkbmlnaHQ=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="3-下载需要的包-软件。资源查询"><a href="#3-下载需要的包-软件。资源查询" class="headerlink" title="3. 下载需要的包|软件。资源查询"></a>3. 下载需要的包|软件。<a href="https://chocolatey.org/packages">资源查询</a></h2><ul><li>下载一个dart-sdk<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">choco install dart-sdk<br></code></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/20200904150759430.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hfbWlkbmlnaHQ=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></li></ul>]]></content>
    
    
    <categories>
      
      <category>实用技巧</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cmd</tag>
      
      <tag>windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>整洁的commit 之 git rebase 的使用</title>
    <link href="/2020/09/18/%E6%95%B4%E6%B4%81%E7%9A%84commit%20%E4%B9%8B%20git%20rebase%20%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2020/09/18/%E6%95%B4%E6%B4%81%E7%9A%84commit%20%E4%B9%8B%20git%20rebase%20%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>干净利索是一种态度，避免出现无用的 commit 。学习使用 git rebase 命令，真的会爱上ta。</p><h1 id="合并最近俩条commit"><a href="#合并最近俩条commit" class="headerlink" title="合并最近俩条commit"></a>合并最近俩条commit</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs git">git rebase -i HEAD~2<br></code></pre></td></tr></table></figure><p>需要合并几条数据，数字改为几即可。</p><h1 id="自动进入-vi-编辑模式"><a href="#自动进入-vi-编辑模式" class="headerlink" title="自动进入 vi 编辑模式"></a>自动进入 vi 编辑模式</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs vi">pick e0b28b9 test 1<br>pick 670239a test 2<br><br># Rebase 4195fd7..670239a onto 4195fd7 (2 commands)<br>#<br># Commands:<br># p, pick &lt;commit&gt; &#x3D; use commit<br># r, reword &lt;commit&gt; &#x3D; use commit, but edit the commit message<br># e, edit &lt;commit&gt; &#x3D; use commit, but stop for amending<br># s, squash &lt;commit&gt; &#x3D; use commit, but meld into previous commit<br># f, fixup &lt;commit&gt; &#x3D; like &quot;squash&quot;, but discard this commit&#39;s log message<br># x, exec &lt;command&gt; &#x3D; run command (the rest of the line) using shell<br># b, break &#x3D; stop here (continue rebase later with &#39;git rebase --continue&#39;)<br># d, drop &lt;commit&gt; &#x3D; remove commit<br># l, label &lt;label&gt; &#x3D; label current HEAD with a name<br># t, reset &lt;label&gt; &#x3D; reset HEAD to a label<br># m, merge [-C &lt;commit&gt; | -c &lt;commit&gt;] &lt;label&gt; [# &lt;oneline&gt;]<br># .       create a merge commit using the original merge commit&#39;s<br># .       message (or the oneline, if no original merge commit was<br># .       specified). Use -c &lt;commit&gt; to reword the commit message.<br>#<br># These lines can be re-ordered; they are executed from top to bottom.<br>#<br># If you remove a line here THAT COMMIT WILL BE LOST.<br>#<br># However, if you remove everything, the rebase will be aborted.<br></code></pre></td></tr></table></figure><h1 id="输入i进入编辑模式，-把除第一行的pick改为s"><a href="#输入i进入编辑模式，-把除第一行的pick改为s" class="headerlink" title="输入i进入编辑模式， 把除第一行的pick改为s"></a>输入i进入编辑模式， 把除第一行的pick改为s</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vi">pick e0b28b9 test 1<br>s 670239a test 2<br></code></pre></td></tr></table></figure><p>按esc键退出输入模式，输入:(英文冒号)进入底线命令模式<br><img src="https://img-blog.csdnimg.cn/20200918145438240.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hfbWlkbmlnaHQ=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h1 id="输入wq，会自动进入下一个-vi-编辑模式"><a href="#输入wq，会自动进入下一个-vi-编辑模式" class="headerlink" title="输入wq，会自动进入下一个 vi 编辑模式"></a>输入wq，会自动进入下一个 vi 编辑模式</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs vi"># This is a combination of 2 commits.<br># This is the 1st commit message:<br><br>test 1<br><br># This is the commit message #2:<br><br>test 2<br><br># Please enter the commit message for your changes. Lines starting<br># with &#39;#&#39; will be ignored, and an empty message aborts the commit.<br>#<br># Date:      Fri Sep 18 14:27:13 2020 +0800<br>#<br># interactive rebase in progress; onto 4195fd7<br># Last commands done (2 commands done):<br>#    pick e0b28b9 test 1<br>#    squash 670239a test 2<br># No commands remaining.<br># You are currently rebasing branch &#39;master&#39; on &#39;4195fd7&#39;.<br>#<br># Changes to be committed:<br>#       new file:   demo.txt<br>#<br><br></code></pre></td></tr></table></figure><h1 id="输入i进入编辑模式，-修改注释信息"><a href="#输入i进入编辑模式，-修改注释信息" class="headerlink" title="输入i进入编辑模式， 修改注释信息"></a>输入i进入编辑模式， 修改注释信息</h1><p>第四行为第一条 commit 的注释信息。第六行可以删除掉，是无用信息。第八行是第二条 commit 的注释信息，可以选择删除掉，或合并如第一条。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vi"># This is a combination of 2 commits.<br># This is the 1st commit message:<br><br>test 1 &amp;&amp; test 2<br></code></pre></td></tr></table></figure><p>按esc键退出输入模式，输入:(英文冒号)进入底线命令模式，输入 wq 退出编辑。</p><h1 id="git-log-查看日志"><a href="#git-log-查看日志" class="headerlink" title="git log 查看日志"></a>git log 查看日志</h1><p><img src="https://img-blog.csdnimg.cn/20200924110846315.png#pic_center" alt="在这里插入图片描述"></p><h1 id="git-push-origin-master-f-推送分支到远程"><a href="#git-push-origin-master-f-推送分支到远程" class="headerlink" title="git push origin master -f 推送分支到远程"></a>git push origin master -f 推送分支到远程</h1><p>加入 -f 是因为使用 rebase 后必须强制推送才可以推送到远程。</p>]]></content>
    
    
    <categories>
      
      <category>git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解决方案：dockerfile无法下载依赖，docker容器内无外网</title>
    <link href="/2020/09/02/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%EF%BC%9Adockerfile%E6%97%A0%E6%B3%95%E4%B8%8B%E8%BD%BD%E4%BE%9D%E8%B5%96%EF%BC%8Cdocker%E5%AE%B9%E5%99%A8%E5%86%85%E6%97%A0%E5%A4%96%E7%BD%91/"/>
    <url>/2020/09/02/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%EF%BC%9Adockerfile%E6%97%A0%E6%B3%95%E4%B8%8B%E8%BD%BD%E4%BE%9D%E8%B5%96%EF%BC%8Cdocker%E5%AE%B9%E5%99%A8%E5%86%85%E6%97%A0%E5%A4%96%E7%BD%91/</url>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200902135618982.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hfbWlkbmlnaHQ=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>一、 查看宿主机的nameserver</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> cat /etc/resolv.conf</span><br>options single-request-reopen<br>nameserver 8.8.8.8<br>nameserver 8.8.8.4<br><span class="hljs-meta">$</span><span class="bash">systemctl restart NetworkManager</span><br></code></pre></td></tr></table></figure><p>二、 创建或修改 /etc/default/docker,在其中添加或编辑如下选项</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">DOCKER_OPTS=&quot;--dns 8.8.8.8&quot;<br></code></pre></td></tr></table></figure><p>三、 重启 docker</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl restart docker<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>阿里云</tag>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>H5：地理位置 Geolocation 详解</title>
    <link href="/2020/08/25/H5%EF%BC%9A%E5%9C%B0%E7%90%86%E4%BD%8D%E7%BD%AE%20Geolocation%20%E8%AF%A6%E8%A7%A3/"/>
    <url>/2020/08/25/H5%EF%BC%9A%E5%9C%B0%E7%90%86%E4%BD%8D%E7%BD%AE%20Geolocation%20%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="参考标准"><a href="#参考标准" class="headerlink" title="参考标准"></a>参考标准</h1><h2 id="W3C-Recommendation-8-November-2016-GitHub-reference-added-31-January-2018"><a href="#W3C-Recommendation-8-November-2016-GitHub-reference-added-31-January-2018" class="headerlink" title="W3C Recommendation 8 November 2016 (GitHub reference added 31 January 2018)"></a><a href="https://www.w3.org/TR/geolocation-API/">W3C Recommendation 8 November 2016 (GitHub reference added 31 January 2018)</a></h2><h1 id="位置信息的获取依据"><a href="#位置信息的获取依据" class="headerlink" title="位置信息的获取依据"></a>位置信息的获取依据</h1><p>W3C定义geolocation-API实现标准解释为：接口与底层位置信息无关。常见的位置信息来源包括全球定位系统(GPS)和从网络信号推断出的位置，如IP地址、RFID、WiFi和蓝牙MAC地址、GSM/CDMA小区id，以及用户输入。不能保证API返回设备的实际位置。</p><p>规范中没有规定使用这些设备的先后顺序。在HTML5的实现中，手机等移动设备优先使用GPS定位。笔记本和部分平板，最准确的定位是WIFI。网线上网的台式机，一般就只能使用IP来定位了，IP准确度最低。</p><p>出于隐私保护考虑，标准规范获取地理位置必须得用户授权后才能得到地理位置信息，并且<strong>在HTTP协议下除locahost / 127.0.0.1，其它地址必须使用HTTPS协议才可正确获取</strong>。</p><h1 id="geolocation-API-详解"><a href="#geolocation-API-详解" class="headerlink" title="geolocation-API 详解"></a>geolocation-API 详解</h1><h2 id="1-环境判断"><a href="#1-环境判断" class="headerlink" title="1. 环境判断"></a>1. 环境判断</h2><p>geolocation是浏览器暴露的接口，所以该接口必须保证在浏览器环境下使用。并且浏览器版本支持geolocation方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span> ( <span class="hljs-string">&quot;geolocation&quot;</span> <span class="hljs-keyword">in</span> navigator ) &#123;<br><span class="hljs-comment">// 浏览器支持获取地理位置</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">// 浏览器不支持获取地理位置</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-内置方法"><a href="#2-内置方法" class="headerlink" title="2. 内置方法"></a>2. 内置方法</h2><h3 id="注：geolocation-接口不继承任何方法。"><a href="#注：geolocation-接口不继承任何方法。" class="headerlink" title="注：geolocation 接口不继承任何方法。"></a>注：geolocation 接口不继承任何方法。</h3><h3 id="geolocation-getCurrentPosition"><a href="#geolocation-getCurrentPosition" class="headerlink" title="geolocation.getCurrentPosition()"></a>geolocation.getCurrentPosition()</h3><h4 id="支持三个参数，参数一是必须的也就是成功回调是必须的。"><a href="#支持三个参数，参数一是必须的也就是成功回调是必须的。" class="headerlink" title="支持三个参数，参数一是必须的也就是成功回调是必须的。"></a>支持三个参数，参数一是必须的也就是成功回调是必须的。</h4><h5 id="param1：successCallback"><a href="#param1：successCallback" class="headerlink" title="param1：successCallback()"></a>param1：successCallback()</h5><h5 id="param2：errorCallback"><a href="#param2：errorCallback" class="headerlink" title="param2：errorCallback()"></a>param2：errorCallback()</h5><h5 id="param3：PositionOptions"><a href="#param3：PositionOptions" class="headerlink" title="param3：PositionOptions"></a>param3：PositionOptions</h5><h6 id="PositionOptions-可选参数："><a href="#PositionOptions-可选参数：" class="headerlink" title="PositionOptions 可选参数："></a>PositionOptions 可选参数：</h6><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br> enableHighAccuracy // 获取高精度位置,默认值为false<br>  timeout // 超时时长<br>  maximumAge // 缓存时长<br>  &#125;<br></code></pre></td></tr></table></figure><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span> ( <span class="hljs-string">&quot;geolocation&quot;</span> <span class="hljs-keyword">in</span> navigator ) &#123;<br><span class="hljs-comment">// 浏览器支持获取地理位置</span><br><span class="hljs-keyword">const</span> successCallback = <span class="hljs-function">(<span class="hljs-params">location</span>) =&gt;</span> &#123;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;获取到的地理位置：&quot;</span>, location)<br>&#125;<br><span class="hljs-keyword">const</span> errorCallback = <span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> &#123;<br><span class="hljs-keyword">switch</span> (error.code) &#123;<br>            <span class="hljs-keyword">case</span> error.TIMEOUT:<br>              <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;获取地理位置超时！&quot;</span>);<br>              <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> error.POSITION_UNAVAILABLE:<br>              <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;内部错误！无法获取地理位置！&quot;</span>);<br>              <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> error.PERMISSION_DENIED:<br>              <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;没有权限获取地理位置权限！&quot;</span>);<br>              <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>              <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;获取地理位置异常：&quot;</span>, error);<br>              <span class="hljs-keyword">break</span>;<br>         &#125;<br>&#125;<br><span class="hljs-keyword">const</span> PositionOptions = &#123;<br>         enableHighAccuracy: <span class="hljs-literal">true</span>,<br>        timeout: <span class="hljs-number">5000</span>,<br>         maximumAge: <span class="hljs-number">3000</span>,<br>&#125;<br>navigator.geolocation.getCurrentPosition(<br>successCallback,<br>errorCallback,<br>PositionOptions<br>)<br>&#125;<span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">// 浏览器不支持获取地理位置</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="geolocation-watchPosition"><a href="#geolocation-watchPosition" class="headerlink" title="geolocation.watchPosition()"></a>geolocation.watchPosition()</h3><h4 id="支持三个参数，参数一是必须的也就是成功回调是必须的。-1"><a href="#支持三个参数，参数一是必须的也就是成功回调是必须的。-1" class="headerlink" title="支持三个参数，参数一是必须的也就是成功回调是必须的。"></a>支持三个参数，参数一是必须的也就是成功回调是必须的。</h4><h5 id="param1：successCallback-1"><a href="#param1：successCallback-1" class="headerlink" title="param1：successCallback()"></a>param1：successCallback()</h5><h5 id="param2：errorCallback-1"><a href="#param2：errorCallback-1" class="headerlink" title="param2：errorCallback()"></a>param2：errorCallback()</h5><h5 id="param3：PositionOptions-1"><a href="#param3：PositionOptions-1" class="headerlink" title="param3：PositionOptions"></a>param3：PositionOptions</h5><h6 id="PositionOptions-可选参数：-1"><a href="#PositionOptions-可选参数：-1" class="headerlink" title="PositionOptions 可选参数："></a>PositionOptions 可选参数：</h6><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br> enableHighAccuracy // 获取高精度位置,默认值为false<br>  timeout // 超时时长<br>  maximumAge // 缓存时长<br>  &#125;<br></code></pre></td></tr></table></figure><h4 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span> ( <span class="hljs-string">&quot;geolocation&quot;</span> <span class="hljs-keyword">in</span> navigator ) &#123;<br><span class="hljs-comment">// 浏览器支持获取地理位置</span><br><span class="hljs-keyword">const</span> successCallback = <span class="hljs-function">(<span class="hljs-params">location</span>) =&gt;</span> &#123;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;获取到的地理位置：&quot;</span>, location)<br>&#125;<br><span class="hljs-keyword">const</span> errorCallback = <span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> &#123;<br><span class="hljs-keyword">switch</span> (error.code) &#123;<br>            <span class="hljs-keyword">case</span> error.TIMEOUT:<br>              <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;获取地理位置超时！&quot;</span>);<br>              <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> error.POSITION_UNAVAILABLE:<br>              <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;内部错误！无法获取地理位置！&quot;</span>);<br>              <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> error.PERMISSION_DENIED:<br>              <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;没有权限获取地理位置权限！&quot;</span>);<br>              <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>              <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;获取地理位置异常：&quot;</span>, error);<br>              <span class="hljs-keyword">break</span>;<br>         &#125;<br>&#125;<br><span class="hljs-keyword">const</span> PositionOptions = &#123;<br>         enableHighAccuracy: <span class="hljs-literal">true</span>,<br>        timeout: <span class="hljs-number">5000</span>,<br>         maximumAge: <span class="hljs-number">3000</span>,<br>&#125;<br>navigator.geolocation.watchPosition(<br>successCallback,<br>errorCallback,<br>PositionOptions<br>)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">// 浏览器不支持获取地理位置</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="geolocation-clearWatch"><a href="#geolocation-clearWatch" class="headerlink" title="geolocation.clearWatch()"></a>geolocation.clearWatch()</h3><h4 id="支持一个参数："><a href="#支持一个参数：" class="headerlink" title="支持一个参数："></a>支持一个参数：</h4><ul><li>param1：geolocation Id</li></ul><h4 id="例子-2"><a href="#例子-2" class="headerlink" title="例子"></a>例子</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span> ( <span class="hljs-string">&quot;geolocation&quot;</span> <span class="hljs-keyword">in</span> navigator ) &#123;<br><span class="hljs-comment">// 浏览器支持获取地理位置</span><br><span class="hljs-keyword">const</span> successCallback = <span class="hljs-function">(<span class="hljs-params">location</span>) =&gt;</span> &#123;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;获取到的地理位置：&quot;</span>, location)<br>&#125;<br><span class="hljs-keyword">const</span> errorCallback = <span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> &#123;<br><span class="hljs-keyword">switch</span> (error.code) &#123;<br>            <span class="hljs-keyword">case</span> error.TIMEOUT:<br>              <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;获取地理位置超时！&quot;</span>);<br>              <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> error.POSITION_UNAVAILABLE:<br>              <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;内部错误！无法获取地理位置！&quot;</span>);<br>              <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> error.PERMISSION_DENIED:<br>              <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;没有权限获取地理位置权限！&quot;</span>);<br>              <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>              <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;获取地理位置异常：&quot;</span>, error);<br>              <span class="hljs-keyword">break</span>;<br>         &#125;<br>&#125;<br><span class="hljs-keyword">const</span> PositionOptions = &#123;<br>         enableHighAccuracy: <span class="hljs-literal">true</span>,<br>        timeout: <span class="hljs-number">5000</span>,<br>         maximumAge: <span class="hljs-number">3000</span>,<br>&#125;<br><span class="hljs-keyword">var</span> getLocation = navigator.geolocation.watchPosition(<br>successCallback,<br>errorCallback,<br>PositionOptions<br>)<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>          navigator.geolocation.clearWatch(getLocation);<br>&#125;, <span class="hljs-number">1000</span> * <span class="hljs-number">60</span>)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">// 浏览器不支持获取地理位置</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-回调值"><a href="#3-回调值" class="headerlink" title="3. 回调值"></a>3. 回调值</h2><h3 id="success-回调值"><a href="#success-回调值" class="headerlink" title="success 回调值"></a>success 回调值</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br><span class="hljs-attr">&quot;coords&quot;</span>: &#123;<br><span class="hljs-attr">&quot;latitude&quot;</span>: Number, <span class="hljs-comment">// 十进制的维度。</span><br><span class="hljs-attr">&quot;longitude&quot;</span>: Number, <span class="hljs-comment">// 十进制的经度。</span><br><span class="hljs-attr">&quot;altitude&quot;</span>: Number || <span class="hljs-literal">null</span>, <span class="hljs-comment">// 高度，以 WGS84 椭球面上的米为单位指定。</span><br><span class="hljs-attr">&quot;accuracy&quot;</span>: Number, <span class="hljs-comment">// 经纬度的精度级别，米为单位，非负的实数。</span><br><span class="hljs-attr">&quot;altitudeAccuracy&quot;</span>: Number || <span class="hljs-literal">null</span>, <span class="hljs-comment">// 高度精度，米为单位，非负的实数。</span><br><span class="hljs-attr">&quot;heading&quot;</span>: Number || <span class="hljs-literal">null</span>, <span class="hljs-comment">// 设备的移动方向，以度数表示，其中0°≤heading &lt; 360°，相对真北顺时针计算。如果设备是静止的则表示为0。</span><br><span class="hljs-attr">&quot;speed&quot;</span>: Number || <span class="hljs-literal">null</span> <span class="hljs-comment">// 移动速度，米/每秒，非负实数。</span><br>&#125;,<br><span class="hljs-attr">&quot;timestamp&quot;</span>: Number <span class="hljs-comment">// 获取地理位置的时间，返回为时间戳。</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="error-回调值"><a href="#error-回调值" class="headerlink" title="error 回调值"></a>error 回调值</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br><span class="hljs-attr">&quot;code&quot;</span>: number, <span class="hljs-comment">// 错误代码，1.没有权限、2.内部错误、3.超时</span><br><span class="hljs-attr">&quot;message&quot;</span>: string <span class="hljs-comment">// 错误描述</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h2><ol><li>   使用chrome在电脑中测试，需要可以访问到<a href="https://www.googleapis.com/%E3%80%82%E9%80%9A%E8%BF%87%E6%8A%93%E5%8C%85%E5%88%86%E6%9E%90%EF%BC%8C%E5%9C%A8PC%E7%AB%AFchrome%E4%B8%AD%E4%BD%BF%E7%94%A8Geolocation%E6%97%B6%EF%BC%8C%E6%98%AF%E9%80%9A%E8%BF%87%E8%AE%BF%E9%97%AEhttps://www.googleapis.com/%E5%8E%BB%E8%8E%B7%E5%8F%96%E5%88%B0%E7%9A%84%E4%BF%A1%E6%81%AF%E3%80%82">https://www.googleapis.com/。通过抓包分析，在PC端chrome中使用Geolocation时，是通过访问https://www.googleapis.com/去获取到的信息。</a></li><li>   通过百度地图提供的接口 <a href="http://api.map.baidu.com/geocoder?location=41.047669,116.313082&amp;output=json%EF%BC%8C%E6%9B%BF%E6%8D%A2%E7%BB%8F%E7%BA%AC%E5%BA%A6%E5%8F%AF%E8%A7%A3%E6%9E%90%E5%87%BA%E5%9F%8E%E5%B8%82%E4%BF%A1%E6%81%AF%E3%80%82%E6%B5%8B%E8%AF%95%E5%8F%AA%E6%9C%89%E5%9B%BD%E5%86%85%E7%9A%84%E7%BB%8F%E7%BA%AC%E5%BA%A6%E5%8F%AF%E7%94%A8%E3%80%82">http://api.map.baidu.com/geocoder?location=41.047669,116.313082&amp;output=json，替换经纬度可解析出城市信息。测试只有国内的经纬度可用。</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>HTML5</category>
      
    </categories>
    
    
    <tags>
      
      <tag>html5</tag>
      
      <tag>javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>实用技巧：更好的使用Cmder</title>
    <link href="/2020/08/20/%E5%AE%9E%E7%94%A8%E6%8A%80%E5%B7%A7%EF%BC%9A%E6%9B%B4%E5%A5%BD%E7%9A%84%E4%BD%BF%E7%94%A8Cmder/"/>
    <url>/2020/08/20/%E5%AE%9E%E7%94%A8%E6%8A%80%E5%B7%A7%EF%BC%9A%E6%9B%B4%E5%A5%BD%E7%9A%84%E4%BD%BF%E7%94%A8Cmder/</url>
    
    <content type="html"><![CDATA[<h3 id="Win-R-可执行cmder"><a href="#Win-R-可执行cmder" class="headerlink" title="Win + R 可执行cmder"></a>Win + R 可执行cmder</h3><p>在系统环境变量加入cmder的安装目录即可。</p><ol><li>安装目录：D:\soft\cmder<br><img src="https://img-blog.csdnimg.cn/20200820091451632.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hfbWlkbmlnaHQ=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></li><li>环境变量加入安装目录。<br><img src="https://img-blog.csdnimg.cn/20200820091551287.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hfbWlkbmlnaHQ=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><h3 id="右键执行Cmder"><a href="#右键执行Cmder" class="headerlink" title="右键执行Cmder"></a>右键执行Cmder</h3></li></ol><p>使用管理员权限打开Cmd，执行：Cmder.exe /REGISTER ALL</p><p><img src="https://img-blog.csdnimg.cn/20200820091722853.png#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200820092007655.gif#pic_center" alt="在这里插入图片描述"></p>]]></content>
    
    
    <categories>
      
      <category>实用技巧</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cmd</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Cmder 运行报错： 此时不应有 Files\Java\jdk-11.0.1\bin</title>
    <link href="/2020/08/20/Cmder%20%E8%BF%90%E8%A1%8C%E6%8A%A5%E9%94%99%EF%BC%9A%20%E6%AD%A4%E6%97%B6%E4%B8%8D%E5%BA%94%E6%9C%89%20Files_Java_jdk-11.0.1_bin%E3%80%82/"/>
    <url>/2020/08/20/Cmder%20%E8%BF%90%E8%A1%8C%E6%8A%A5%E9%94%99%EF%BC%9A%20%E6%AD%A4%E6%97%B6%E4%B8%8D%E5%BA%94%E6%9C%89%20Files_Java_jdk-11.0.1_bin%E3%80%82/</url>
    
    <content type="html"><![CDATA[<h2 id="错误内容"><a href="#错误内容" class="headerlink" title="错误内容"></a>错误内容</h2><p><img src="https://img-blog.csdnimg.cn/20200820090248814.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hfbWlkbmlnaHQ=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="错误原因"><a href="#错误原因" class="headerlink" title="错误原因"></a>错误原因</h2><p>环境变量配置错误，安装JDK时自动创建的环境变量配置错误。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><ol><li>   找到错误<br><img src="https://img-blog.csdnimg.cn/20200820090508906.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hfbWlkbmlnaHQ=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></li><li>   改为正常的</li></ol><p><img src="https://img-blog.csdnimg.cn/2020082009065172.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hfbWlkbmlnaHQ=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>]]></content>
    
    
    <categories>
      
      <category>实用技巧</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cmd</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>安装kali-linux提示vesamenu.c32 not a COM32R image</title>
    <link href="/2020/08/16/%E5%AE%89%E8%A3%85kali-linux%E6%8F%90%E7%A4%BAvesamenu.c32%20not%20a%20COM32R%20image/"/>
    <url>/2020/08/16/%E5%AE%89%E8%A3%85kali-linux%E6%8F%90%E7%A4%BAvesamenu.c32%20not%20a%20COM32R%20image/</url>
    
    <content type="html"><![CDATA[<h3 id="错误原因"><a href="#错误原因" class="headerlink" title="错误原因"></a>错误原因</h3><p>初查为老电脑原因~</p><h3 id="错误图片"><a href="#错误图片" class="headerlink" title="错误图片"></a>错误图片</h3><p><img src="https://img-blog.csdnimg.cn/20200816182237729.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hfbWlkbmlnaHQ=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><ol><li><p>点击TAB键，会出现安装菜单。<br><img src="https://img-blog.csdnimg.cn/20200816182445706.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hfbWlkbmlnaHQ=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p></li><li><p>BOOT中输入installgui，点击回车。</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">boot: installgui<br></code></pre></td></tr></table></figure></li><li><p>稍等片刻会出现GUI页面，正常安装即可。</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux中安装node并设置软链、全局变量</title>
    <link href="/2020/08/16/linux%E4%B8%AD%E5%AE%89%E8%A3%85node%E5%B9%B6%E8%AE%BE%E7%BD%AE%E8%BD%AF%E9%93%BE%E3%80%81%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F/"/>
    <url>/2020/08/16/linux%E4%B8%AD%E5%AE%89%E8%A3%85node%E5%B9%B6%E8%AE%BE%E7%BD%AE%E8%BD%AF%E9%93%BE%E3%80%81%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F/</url>
    
    <content type="html"><![CDATA[<ol><li><h5 id="下载linux版本的node-js。"><a href="#下载linux版本的node-js。" class="headerlink" title="下载linux版本的node.js。"></a>下载linux版本的node.js。</h5><p> 在<a href="https://nodejs.org/zh-cn/">官网</a>中点击tab中的下载。页面跳转后可看到有俩个子tab，长期支持版、当前发布版，可依据需求选择下载版本。选择下载其它历史版本的node，下拉页面可看到 <a href="https://nodejs.org/zh-cn/download/releases/">以往的版本</a> 按钮，点击后会跳转至历史版本页面，选择需要下载的版本，然后点击对应版本右方的下载按钮，选择对应的系统版本即可下载。linux较为常用的版本为 Linux 二进制文件 (x64) ，当然具体选择依据你的系统版本。</p><ul><li>在widows下访问<a href="https://nodejs.org/zh-cn/download/">node官网</a> 下载，选择liunx版本。下载完成后使用FTP工具上传至安装目录。个人常用的FTP工具为<a href="https://www.netsarang.com/zh/xftp/">XFTP</a>，默认为收费的，但是官方提供了<a href="https://www.netsarang.com/zh/free-for-home-school/">教育版免费开放</a>，在教育版页面填入名字、邮件选择需要下载的软件后，邮箱会收到下载地址。</li><li>使用linux中的wget命令下载。<br>  下载地址在找到需要下载的版本后，直接点击为下载，右键可以复制出下载地址，复制出来直接使用即可。  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget https://nodejs.org/download/release/v14.8.0/node-v14.8.0-linux-x64.tar.gz<br></code></pre></td></tr></table></figure></li></ul></li><li><h5 id="迁移至安装目录。"><a href="#迁移至安装目录。" class="headerlink" title="迁移至安装目录。"></a>迁移至安装目录。</h5><p> 常用的安装目录为 /usr/local 。</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">copy ./node-v14.8.0-linux-x64.tar.gz /usr/local<br></code></pre></td></tr></table></figure></li><li><h5 id="解压文件并重命名。"><a href="#解压文件并重命名。" class="headerlink" title="解压文件并重命名。"></a>解压文件并重命名。</h5> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /usr/local<br>tar -zxvf node-v14.8.0-linux-x64.tar.gz // 解压<br>ls // 查看解压后的目录<br>mv node-v14.8.0-linux-x64 node // 重命名<br></code></pre></td></tr></table></figure></li><li><h5 id="设置全局变量"><a href="#设置全局变量" class="headerlink" title="设置全局变量"></a>设置全局变量</h5><ul><li>软链接<br>  缺点：每一个node的全局依赖都得单独设置。<ul><li>设置node软链  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ln -s /usr/local/node/bin/node /usr/local/bin/<br></code></pre></td></tr></table></figure></li><li>设置npm软链  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ln -s /usr/local/node/bin/npm /usr/local/bin/<br></code></pre></td></tr></table></figure></li></ul></li><li>全局设置<ol><li><p>打开配置文件</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vi /etc/profile<br></code></pre></td></tr></table></figure></li><li><p>输入： i</p><p> 进入编辑状态</p></li><li><p>拉至文件尾部加入</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">export NODE_HOME=/usr/local/node<br>export PATH=$NODE_HOME/bin:$PATH<br></code></pre></td></tr></table></figure></li><li><p>ESC后输入：:wq<br> 保存并退出</p></li><li><p>重新加载profile文件</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">source /etc/profile<br></code></pre></td></tr></table></figure></li></ol></li></ul></li><li><h5 id="愉快的使用node。"><a href="#愉快的使用node。" class="headerlink" title="愉快的使用node。"></a>愉快的使用node。</h5></li></ol>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>node</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>实用技巧：GitHub下载加速</title>
    <link href="/2020/06/28/%E5%AE%9E%E7%94%A8%E6%8A%80%E5%B7%A7%EF%BC%9AGitHub%E4%B8%8B%E8%BD%BD%E5%8A%A0%E9%80%9F/"/>
    <url>/2020/06/28/%E5%AE%9E%E7%94%A8%E6%8A%80%E5%B7%A7%EF%BC%9AGitHub%E4%B8%8B%E8%BD%BD%E5%8A%A0%E9%80%9F/</url>
    
    <content type="html"><![CDATA[<p>例子：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone https://github.com/vuejs/vue.git<br></code></pre></td></tr></table></figure><h1 id="一、使用码云"><a href="#一、使用码云" class="headerlink" title="一、使用码云"></a>一、使用码云</h1><ol><li>登陆码云后，点击右上角加号</li><li>从GitHub/GitLab导入仓库<br><img src="https://img-blog.csdnimg.cn/20200628105552835.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hfbWlkbmlnaHQ=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>截取需要加速的GitHub仓库地址，点击导入<br><img src="https://img-blog.csdnimg.cn/20200628110010588.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hfbWlkbmlnaHQ=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>   等待仓库生成…</li><li>   使用生成仓库地址下载</li></ol><h1 id="二、使用代理"><a href="#二、使用代理" class="headerlink" title="二、使用代理"></a>二、使用代理</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone https://github.com.xxxxx/vuejs/vue.git // xxxxx 为代理地址<br></code></pre></td></tr></table></figure><ul><li>推荐使用cnpmjs.org<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone https://github.com.cnpmjs.org/vuejs/vue.git<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>实用技巧</category>
      
    </categories>
    
    
    <tags>
      
      <tag>github</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React Hook “useState” is called in function “xxx(函数名)” which is neither a React function</title>
    <link href="/2020/06/23/React%20Hook%20%E2%80%9CuseState%E2%80%9D%20is%20called%20in%20function%20%E2%80%9Cxxx(%E5%87%BD%E6%95%B0%E5%90%8D)%E2%80%9D%20which%20is%20neither%20a%20React%20function/"/>
    <url>/2020/06/23/React%20Hook%20%E2%80%9CuseState%E2%80%9D%20is%20called%20in%20function%20%E2%80%9Cxxx(%E5%87%BD%E6%95%B0%E5%90%8D)%E2%80%9D%20which%20is%20neither%20a%20React%20function/</url>
    
    <content type="html"><![CDATA[<h2 id="报错内容"><a href="#报错内容" class="headerlink" title="报错内容"></a>报错内容</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">./src/Containers/device/add/index.tsx<br>  Line <span class="hljs-number">284</span>:<span class="hljs-number">23</span>:  React Hook <span class="hljs-string">&quot;useState&quot;</span> is called <span class="hljs-keyword">in</span> <span class="hljs-function"><span class="hljs-keyword">function</span> &quot;<span class="hljs-title">newDeviceForm</span>&quot; <span class="hljs-title">which</span> <span class="hljs-title">is</span> <span class="hljs-title">neither</span> <span class="hljs-title">a</span> <span class="hljs-title">React</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">component</span> <span class="hljs-title">or</span> <span class="hljs-title">a</span> <span class="hljs-title">custom</span> <span class="hljs-title">React</span> <span class="hljs-title">Hook</span> <span class="hljs-function"><span class="hljs-keyword">function</span>  <span class="hljs-title">react</span>-<span class="hljs-title">hooks</span>/<span class="hljs-title">rules</span>-<span class="hljs-title">of</span>-<span class="hljs-title">hooks</span></span></span></span><br><span class="hljs-function"><span class="hljs-function"><span class="hljs-function"></span></span></span><br><span class="hljs-function"><span class="hljs-function"><span class="hljs-function"><span class="hljs-title">Search</span> <span class="hljs-title">for</span> <span class="hljs-title">the</span> <span class="hljs-title">keywords</span> <span class="hljs-title">to</span> <span class="hljs-title">learn</span> <span class="hljs-title">more</span> <span class="hljs-title">about</span> <span class="hljs-title">each</span> <span class="hljs-title">error</span>.</span></span></span><br></code></pre></td></tr></table></figure><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>把报错的组件改写为class或构造函数。</p><ol><li>找到报错函数<br><img src="https://img-blog.csdnimg.cn/2020062314103766.png" alt="在这里插入图片描述"></li><li>报错Function首字母改为大写即可<br><img src="https://img-blog.csdnimg.cn/20200623141150836.png" alt="在这里插入图片描述"></li></ol>]]></content>
    
    
    <categories>
      
      <category>React</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux下npm/yarn运行项目报错！</title>
    <link href="/2020/06/12/linux%E4%B8%8Bnpm_yarn%E8%BF%90%E8%A1%8C%E9%A1%B9%E7%9B%AE%E6%8A%A5%E9%94%99%EF%BC%81/"/>
    <url>/2020/06/12/linux%E4%B8%8Bnpm_yarn%E8%BF%90%E8%A1%8C%E9%A1%B9%E7%9B%AE%E6%8A%A5%E9%94%99%EF%BC%81/</url>
    
    <content type="html"><![CDATA[<p>解决 Error: ENOSPC: System limit for number of file watchers reached</p><p>原因：</p><p>    linux下系统程序监视超出了默认限制大小，需要手动设置。</p><p>    查询当前系统限额：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">cd <span class="hljs-regexp">/proc/</span>sys<span class="hljs-regexp">/fs/i</span>notify  <span class="hljs-regexp">//</span> 进入系统监控目录<br>ls    <span class="hljs-regexp">//</span> 显示当前文件夹下的文件<br>cat .<span class="hljs-regexp">/max_user_watches    /</span><span class="hljs-regexp">/ 查看当前系统用户最大限额</span><br></code></pre></td></tr></table></figure><p>解决方案：</p><p>    临时扩容：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">sudo sysctl fs<span class="hljs-selector-class">.inotify</span><span class="hljs-selector-class">.max_user_watches</span> = <span class="hljs-number">524288</span>    <span class="hljs-comment">// 可以设置更多</span><br>sudo sysctl -p<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>node</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>服务器开启新服务后公网无法访问！阿里云安全组，linux防火墙可能没有正确配置~</title>
    <link href="/2020/02/16/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%BC%80%E5%90%AF%E6%96%B0%E6%9C%8D%E5%8A%A1%E5%90%8E%E5%85%AC%E7%BD%91%E6%97%A0%E6%B3%95%E8%AE%BF%E9%97%AE%EF%BC%81%E9%98%BF%E9%87%8C%E4%BA%91%E5%AE%89%E5%85%A8%E7%BB%84%EF%BC%8Clinux%E9%98%B2%E7%81%AB%E5%A2%99%E5%8F%AF%E8%83%BD%E6%B2%A1%E6%9C%89%E6%AD%A3%E7%A1%AE%E9%85%8D%E7%BD%AE~/"/>
    <url>/2020/02/16/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%BC%80%E5%90%AF%E6%96%B0%E6%9C%8D%E5%8A%A1%E5%90%8E%E5%85%AC%E7%BD%91%E6%97%A0%E6%B3%95%E8%AE%BF%E9%97%AE%EF%BC%81%E9%98%BF%E9%87%8C%E4%BA%91%E5%AE%89%E5%85%A8%E7%BB%84%EF%BC%8Clinux%E9%98%B2%E7%81%AB%E5%A2%99%E5%8F%AF%E8%83%BD%E6%B2%A1%E6%9C%89%E6%AD%A3%E7%A1%AE%E9%85%8D%E7%BD%AE~/</url>
    
    <content type="html"><![CDATA[<p>开启服务端口需要俩步，配置安全组、开启防火墙</p><h2 id="配置阿里云安全组"><a href="#配置阿里云安全组" class="headerlink" title="配置阿里云安全组"></a>配置阿里云安全组</h2><p>准备工作：<br>    登陆<a href="https://homenew.console.aliyun.com/">阿里云后台</a>，点击左上角菜单,选择云服务器。</p><ol><li><p>选择实例<br><img src="https://img-blog.csdnimg.cn/20200218204149564.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hfbWlkbmlnaHQ=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p>选择安全组<br> <img src="https://img-blog.csdnimg.cn/20200218204438863.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hfbWlkbmlnaHQ=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p>选择配置规则<br><img src="https://img-blog.csdnimg.cn/20200218204539417.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hfbWlkbmlnaHQ=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p>添加安全组规则<img src="https://img-blog.csdnimg.cn/20200216174622559.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hfbWlkbmlnaHQ=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>注：</p><ol><li>端口范围填写 xx/xx,可填写范围（80/8080），也可填写（8080/8080）。填写（80/8080）则开启区间所有端口，反之则只开启8080。</li><li>授权对象可填写指定IP，也可填写0.0.0.0/0。0.0.0.0/0 是开启所有ip访问权限。<h2 id="配置防火墙"><a href="#配置防火墙" class="headerlink" title="配置防火墙"></a>配置防火墙</h2></li></ol></li><li><p>查看当前防火墙列表： firewall-cmd –list-ports</p><pre><code> 注：查看列表的时候可能会返回：FirewallD is not running，这个原因是防火墙未开启。可以选择开启防火墙或者不开启，只配置安全组也是可行的。</code></pre></li><li><p>开启防火墙：systemctl start firewalld.service</p></li><li><p>开启端口: firewall-cmd –zone=public –add-port=80/tcp –permanent        </p><pre><code> 注：80是配置的开放端口，此处替换80为需要开启的端口即可。</code></pre></li><li><p>重启防火墙：systemctl restart firewalld.service</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>阿里云</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
